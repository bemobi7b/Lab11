
c:/Users/Rich/CTD2023/Lab11/target/5.3.0/argon/Lab11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000037bc  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b77d8  000b77d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e5a4  000b77fc  0000e5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001e0  2003e610  2003e610  0001e610  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b7868  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b786c  000b786c  0001786c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b7872  000b7872  00017872  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7896  000b7896  00017896  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00129c44  00000000  00000000  0001789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014386  00000000  00000000  001414de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003f315  00000000  00000000  00155864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e30  00000000  00000000  00194b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a8d0  00000000  00000000  001979a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003db03  00000000  00000000  001a2279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00048631  00000000  00000000  001dfd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00139bda  00000000  00000000  002283ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000084e4  00000000  00000000  00361f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fc17 	bl	b6870 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f002 fc1f 	bl	b688c <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e5a4 	.word	0x2003e5a4
   b4058:	000b77fc 	.word	0x000b77fc
   b405c:	2003e610 	.word	0x2003e610
   b4060:	2003e610 	.word	0x2003e610
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f002 f82b 	bl	b60c8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b77b4 	.word	0x000b77b4
   b408c:	000b77d8 	.word	0x000b77d8

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b880 	b.w	b4194 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f8a7 	bl	b41e8 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 bfcb 	b.w	b6038 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f001 bdb1 	b.w	b5c08 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f001 bdb7 	b.w	b5c18 <free>
	...

000b40ac <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ae:	4a03      	ldr	r2, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x10>)
   b40b0:	4903      	ldr	r1, [pc, #12]	; (b40c0 <__cxa_pure_virtual+0x14>)
   b40b2:	200c      	movs	r0, #12
   b40b4:	f001 fd0c 	bl	b5ad0 <panic_>
  while (1);
   b40b8:	e7fe      	b.n	b40b8 <__cxa_pure_virtual+0xc>
   b40ba:	bf00      	nop
   b40bc:	000b5851 	.word	0x000b5851
   b40c0:	000b69d8 	.word	0x000b69d8

000b40c4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c4:	7800      	ldrb	r0, [r0, #0]
   b40c6:	fab0 f080 	clz	r0, r0
   b40ca:	0940      	lsrs	r0, r0, #5
   b40cc:	4770      	bx	lr

000b40ce <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ce:	2301      	movs	r3, #1
   b40d0:	7003      	strb	r3, [r0, #0]
   b40d2:	4770      	bx	lr

000b40d4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d4:	4770      	bx	lr

000b40d6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40d6:	b510      	push	{r4, lr}
  }
   b40d8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40da:	4604      	mov	r4, r0
  }
   b40dc:	f7ff ffe3 	bl	b40a6 <_ZdlPvj>
   b40e0:	4620      	mov	r0, r4
   b40e2:	bd10      	pop	{r4, pc}

000b40e4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	b40e      	push	{r1, r2, r3}
   b40e6:	b503      	push	{r0, r1, lr}
   b40e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ea:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40f2:	f001 ff32 	bl	b5f5a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40f6:	b002      	add	sp, #8
   b40f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b40fc:	b003      	add	sp, #12
   b40fe:	4770      	bx	lr

000b4100 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4100:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4102:	4604      	mov	r4, r0
   b4104:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4106:	7922      	ldrb	r2, [r4, #4]
   b4108:	68a3      	ldr	r3, [r4, #8]
   b410a:	b132      	cbz	r2, b411a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b410c:	b9a3      	cbnz	r3, b4138 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b410e:	490b      	ldr	r1, [pc, #44]	; (b413c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4110:	b002      	add	sp, #8
   b4112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4116:	f001 bee5 	b.w	b5ee4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b411a:	4a09      	ldr	r2, [pc, #36]	; (b4140 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b411c:	7b26      	ldrb	r6, [r4, #12]
   b411e:	4d09      	ldr	r5, [pc, #36]	; (b4144 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4120:	4909      	ldr	r1, [pc, #36]	; (b4148 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4122:	7b64      	ldrb	r4, [r4, #13]
   b4124:	2e01      	cmp	r6, #1
   b4126:	bf18      	it	ne
   b4128:	4629      	movne	r1, r5
   b412a:	e9cd 1400 	strd	r1, r4, [sp]
   b412e:	4907      	ldr	r1, [pc, #28]	; (b414c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4130:	f7ff ffd8 	bl	b40e4 <_ZN5Print6printfEPKcz>
  }
   b4134:	b002      	add	sp, #8
   b4136:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4138:	4a05      	ldr	r2, [pc, #20]	; (b4150 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b413a:	e7ef      	b.n	b411c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b413c:	000b69fe 	.word	0x000b69fe
   b4140:	000b69f5 	.word	0x000b69f5
   b4144:	000b69fa 	.word	0x000b69fa
   b4148:	000b69f6 	.word	0x000b69f6
   b414c:	000b6a14 	.word	0x000b6a14
   b4150:	000b69ed 	.word	0x000b69ed

000b4154 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4154:	b40e      	push	{r1, r2, r3}
   b4156:	b503      	push	{r0, r1, lr}
   b4158:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b415a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b415c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4160:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4162:	f001 fefa 	bl	b5f5a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4166:	b002      	add	sp, #8
   b4168:	f85d eb04 	ldr.w	lr, [sp], #4
   b416c:	b003      	add	sp, #12
   b416e:	4770      	bx	lr

000b4170 <_Z12resetDisplayv>:
			Serial.println("no sample");
		}
	}
}

void resetDisplay(){
   b4170:	b510      	push	{r4, lr}
  display.clearDisplay();
   b4172:	4c07      	ldr	r4, [pc, #28]	; (b4190 <_Z12resetDisplayv+0x20>)
   b4174:	4620      	mov	r0, r4
   b4176:	f001 f82b 	bl	b51d0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b417a:	2101      	movs	r1, #1
   b417c:	4620      	mov	r0, r4
   b417e:	f000 fdd2 	bl	b4d26 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4182:	2200      	movs	r2, #0
   b4184:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4188:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  // display.display();
}
   b418c:	bd10      	pop	{r4, pc}
   b418e:	bf00      	nop
   b4190:	2003e650 	.word	0x2003e650

000b4194 <setup>:
void setup() {  
   b4194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  display.setup();
   b4196:	4811      	ldr	r0, [pc, #68]	; (b41dc <setup+0x48>)
   b4198:	f000 fe14 	bl	b4dc4 <_ZN16OledWingAdafruit5setupEv>
  resetDisplay();
   b419c:	f7ff ffe8 	bl	b4170 <_Z12resetDisplayv>
  display.display();
   b41a0:	480e      	ldr	r0, [pc, #56]	; (b41dc <setup+0x48>)
   b41a2:	f001 fa83 	bl	b56ac <_ZN16Adafruit_SSD13067displayEv>
	Serial.begin(9600);
   b41a6:	f002 f897 	bl	b62d8 <_Z16_fetch_usbserialv>
   b41aa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41ae:	f002 f887 	bl	b62c0 <_ZN9USBSerial5beginEl>
	LIS3DHConfig config;
   b41b2:	a803      	add	r0, sp, #12
   b41b4:	f000 f90e 	bl	b43d4 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   b41b8:	2150      	movs	r1, #80	; 0x50
   b41ba:	a803      	add	r0, sp, #12
   b41bc:	f000 f917 	bl	b43ee <_ZN12LIS3DHConfig12setAccelModeEh>
	bool setupSuccess = accel.setup(config);
   b41c0:	a903      	add	r1, sp, #12
   b41c2:	4807      	ldr	r0, [pc, #28]	; (b41e0 <setup+0x4c>)
   b41c4:	f000 f976 	bl	b44b4 <_ZN6LIS3DH5setupER12LIS3DHConfig>
   b41c8:	9001      	str	r0, [sp, #4]
	Serial.printlnf("setupSuccess=%d", setupSuccess);
   b41ca:	f002 f885 	bl	b62d8 <_Z16_fetch_usbserialv>
   b41ce:	9a01      	ldr	r2, [sp, #4]
   b41d0:	4904      	ldr	r1, [pc, #16]	; (b41e4 <setup+0x50>)
   b41d2:	f7ff ffbf 	bl	b4154 <_ZN5Print8printlnfEPKcz>
}
   b41d6:	b007      	add	sp, #28
   b41d8:	f85d fb04 	ldr.w	pc, [sp], #4
   b41dc:	2003e650 	.word	0x2003e650
   b41e0:	2003e628 	.word	0x2003e628
   b41e4:	000b6a31 	.word	0x000b6a31

000b41e8 <loop>:
void loop() {
   b41e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b41ea:	481d      	ldr	r0, [pc, #116]	; (b4260 <loop+0x78>)
	if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   b41ec:	4c1d      	ldr	r4, [pc, #116]	; (b4264 <loop+0x7c>)
  display.loop();
   b41ee:	f000 fe12 	bl	b4e16 <_ZN16OledWingAdafruit4loopEv>
  resetDisplay();
   b41f2:	f7ff ffbd 	bl	b4170 <_Z12resetDisplayv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41f6:	f001 fb33 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   b41fa:	6823      	ldr	r3, [r4, #0]
   b41fc:	1ac0      	subs	r0, r0, r3
   b41fe:	2863      	cmp	r0, #99	; 0x63
   b4200:	d925      	bls.n	b424e <loop+0x66>
   b4202:	f001 fb2d 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
		if (accel.getSample(sample)) {
   b4206:	a902      	add	r1, sp, #8
		lastPrintSample = millis();
   b4208:	6020      	str	r0, [r4, #0]
		if (accel.getSample(sample)) {
   b420a:	4817      	ldr	r0, [pc, #92]	; (b4268 <loop+0x80>)
   b420c:	f000 f928 	bl	b4460 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b4210:	b1f8      	cbz	r0, b4252 <loop+0x6a>
			Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
   b4212:	f002 f861 	bl	b62d8 <_Z16_fetch_usbserialv>
   b4216:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b421a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   b421e:	4913      	ldr	r1, [pc, #76]	; (b426c <loop+0x84>)
   b4220:	9300      	str	r3, [sp, #0]
   b4222:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
   b4226:	f7ff ff95 	bl	b4154 <_ZN5Print8printlnfEPKcz>
      display.println("X, Y, Z:");
   b422a:	4911      	ldr	r1, [pc, #68]	; (b4270 <loop+0x88>)
   b422c:	480c      	ldr	r0, [pc, #48]	; (b4260 <loop+0x78>)
   b422e:	f001 fe6c 	bl	b5f0a <_ZN5Print7printlnEPKc>
      display.printf("%d,%d,%d", sample.x, sample.y, sample.z);
   b4232:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b4236:	9300      	str	r3, [sp, #0]
   b4238:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   b423c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
   b4240:	490a      	ldr	r1, [pc, #40]	; (b426c <loop+0x84>)
   b4242:	4807      	ldr	r0, [pc, #28]	; (b4260 <loop+0x78>)
   b4244:	f7ff ff4e 	bl	b40e4 <_ZN5Print6printfEPKcz>
      display.display();
   b4248:	4805      	ldr	r0, [pc, #20]	; (b4260 <loop+0x78>)
   b424a:	f001 fa2f 	bl	b56ac <_ZN16Adafruit_SSD13067displayEv>
}
   b424e:	b004      	add	sp, #16
   b4250:	bd10      	pop	{r4, pc}
			Serial.println("no sample");
   b4252:	f002 f841 	bl	b62d8 <_Z16_fetch_usbserialv>
   b4256:	4907      	ldr	r1, [pc, #28]	; (b4274 <loop+0x8c>)
   b4258:	f001 fe57 	bl	b5f0a <_ZN5Print7printlnEPKc>
}
   b425c:	e7f7      	b.n	b424e <loop+0x66>
   b425e:	bf00      	nop
   b4260:	2003e650 	.word	0x2003e650
   b4264:	2003e6c0 	.word	0x2003e6c0
   b4268:	2003e628 	.word	0x2003e628
   b426c:	000b6a41 	.word	0x000b6a41
   b4270:	000b6a4a 	.word	0x000b6a4a
   b4274:	000b6a53 	.word	0x000b6a53

000b4278 <_GLOBAL__sub_I_SystemMode>:
}
   b4278:	b537      	push	{r0, r1, r2, r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b427a:	2100      	movs	r1, #0
   b427c:	2001      	movs	r0, #1
   b427e:	f001 fc3f 	bl	b5b00 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4282:	4b1c      	ldr	r3, [pc, #112]	; (b42f4 <_GLOBAL__sub_I_SystemMode+0x7c>)

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   b4284:	4c1c      	ldr	r4, [pc, #112]	; (b42f8 <_GLOBAL__sub_I_SystemMode+0x80>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4286:	4d1d      	ldr	r5, [pc, #116]	; (b42fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b4288:	2200      	movs	r2, #0
   b428a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b428e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4292:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4294:	2003      	movs	r0, #3
   b4296:	f001 fc23 	bl	b5ae0 <set_system_mode>
   b429a:	2108      	movs	r1, #8
   b429c:	4620      	mov	r0, r4
   b429e:	f000 f8b1 	bl	b4404 <_ZN6LIS3DHC1Ei>
   b42a2:	4b17      	ldr	r3, [pc, #92]	; (b4300 <_GLOBAL__sub_I_SystemMode+0x88>)
   b42a4:	6023      	str	r3, [r4, #0]
   b42a6:	7829      	ldrb	r1, [r5, #0]
   b42a8:	f3bf 8f5b 	dmb	ish
   b42ac:	f011 0101 	ands.w	r1, r1, #1
   b42b0:	d10b      	bne.n	b42ca <_GLOBAL__sub_I_SystemMode+0x52>
   b42b2:	4628      	mov	r0, r5
   b42b4:	9101      	str	r1, [sp, #4]
   b42b6:	f7ff ff05 	bl	b40c4 <__cxa_guard_acquire>
   b42ba:	9901      	ldr	r1, [sp, #4]
   b42bc:	b128      	cbz	r0, b42ca <_GLOBAL__sub_I_SystemMode+0x52>
   b42be:	4811      	ldr	r0, [pc, #68]	; (b4304 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b42c0:	f001 fd0e 	bl	b5ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b42c4:	4628      	mov	r0, r5
   b42c6:	f7ff ff02 	bl	b40ce <__cxa_guard_release>
   b42ca:	4b0e      	ldr	r3, [pc, #56]	; (b4304 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b42cc:	60e3      	str	r3, [r4, #12]
   b42ce:	2303      	movs	r3, #3
   b42d0:	6123      	str	r3, [r4, #16]
   b42d2:	2300      	movs	r3, #0
      dataMode_{dataMode}
   b42d4:	4a0c      	ldr	r2, [pc, #48]	; (b4308 <_GLOBAL__sub_I_SystemMode+0x90>)
   b42d6:	7523      	strb	r3, [r4, #20]
   b42d8:	7723      	strb	r3, [r4, #28]
OledWingAdafruit display;
   b42da:	480c      	ldr	r0, [pc, #48]	; (b430c <_GLOBAL__sub_I_SystemMode+0x94>)
   b42dc:	4b0c      	ldr	r3, [pc, #48]	; (b4310 <_GLOBAL__sub_I_SystemMode+0x98>)
   b42de:	6223      	str	r3, [r4, #32]
   b42e0:	2107      	movs	r1, #7
   b42e2:	2301      	movs	r3, #1
   b42e4:	61a2      	str	r2, [r4, #24]
   b42e6:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   b42e8:	b003      	add	sp, #12
   b42ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
OledWingAdafruit display;
   b42ee:	f000 bd3b 	b.w	b4d68 <_ZN16OledWingAdafruitC1Ei>
   b42f2:	bf00      	nop
   b42f4:	2003e61c 	.word	0x2003e61c
   b42f8:	2003e628 	.word	0x2003e628
   b42fc:	2003e610 	.word	0x2003e610
   b4300:	000b6aac 	.word	0x000b6aac
   b4304:	2003e614 	.word	0x2003e614
   b4308:	000b6a68 	.word	0x000b6a68
   b430c:	2003e650 	.word	0x2003e650
   b4310:	00989680 	.word	0x00989680

000b4314 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   b4314:	4770      	bx	lr

000b4316 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   b4316:	b510      	push	{r4, lr}
}
   b4318:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   b431a:	4604      	mov	r4, r0
}
   b431c:	f7ff fec3 	bl	b40a6 <_ZdlPvj>
   b4320:	4620      	mov	r0, r4
   b4322:	bd10      	pop	{r4, pc}

000b4324 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   b4324:	b510      	push	{r4, lr}
   b4326:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   b4328:	f100 0118 	add.w	r1, r0, #24
   b432c:	68c0      	ldr	r0, [r0, #12]
   b432e:	f001 fd23 	bl	b5d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   b4332:	8a20      	ldrh	r0, [r4, #16]
   b4334:	2100      	movs	r1, #0
}
   b4336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   b433a:	f002 b9e6 	b.w	b670a <digitalWrite>

000b433e <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   b433e:	b510      	push	{r4, lr}
   b4340:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   b4342:	2101      	movs	r1, #1
   b4344:	8a00      	ldrh	r0, [r0, #16]
   b4346:	f002 f9e0 	bl	b670a <digitalWrite>

	spi.endTransaction();
   b434a:	68e0      	ldr	r0, [r4, #12]
}
   b434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   b4350:	f001 bcf8 	b.w	b5d44 <_ZN8SPIClass14endTransactionEv>

000b4354 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b4354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4356:	461e      	mov	r6, r3
	beginTransaction();
   b4358:	6803      	ldr	r3, [r0, #0]
   b435a:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b435c:	460f      	mov	r7, r1
   b435e:	4614      	mov	r4, r2
   b4360:	4605      	mov	r5, r0
	beginTransaction();
   b4362:	4798      	blx	r3

	if (numBytes > 1) {
   b4364:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b4366:	bf88      	it	hi
   b4368:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   b436c:	68e8      	ldr	r0, [r5, #12]
   b436e:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b4372:	f001 fd6f 	bl	b5e54 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   b4376:	4426      	add	r6, r4
   b4378:	42b4      	cmp	r4, r6
   b437a:	d006      	beq.n	b438a <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   b437c:	68e8      	ldr	r0, [r5, #12]
   b437e:	2100      	movs	r1, #0
   b4380:	f001 fd68 	bl	b5e54 <_ZN8SPIClass8transferEh>
   b4384:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   b4388:	e7f6      	b.n	b4378 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   b438a:	682b      	ldr	r3, [r5, #0]
   b438c:	4628      	mov	r0, r5
   b438e:	699b      	ldr	r3, [r3, #24]
   b4390:	4798      	blx	r3

	return true;
}
   b4392:	2001      	movs	r0, #1
   b4394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4396 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b4396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4398:	461e      	mov	r6, r3
	beginTransaction();
   b439a:	6803      	ldr	r3, [r0, #0]
   b439c:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b439e:	460f      	mov	r7, r1
   b43a0:	4614      	mov	r4, r2
   b43a2:	4605      	mov	r5, r0
	beginTransaction();
   b43a4:	4798      	blx	r3

	if (numBytes > 1) {
   b43a6:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b43a8:	bf88      	it	hi
   b43aa:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   b43ae:	68e8      	ldr	r0, [r5, #12]
   b43b0:	4639      	mov	r1, r7
   b43b2:	f001 fd4f 	bl	b5e54 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b43b6:	4426      	add	r6, r4
   b43b8:	42b4      	cmp	r4, r6
   b43ba:	d005      	beq.n	b43c8 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   b43bc:	f814 1b01 	ldrb.w	r1, [r4], #1
   b43c0:	68e8      	ldr	r0, [r5, #12]
   b43c2:	f001 fd47 	bl	b5e54 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b43c6:	e7f7      	b.n	b43b8 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   b43c8:	682b      	ldr	r3, [r5, #0]
   b43ca:	4628      	mov	r0, r5
   b43cc:	699b      	ldr	r3, [r3, #24]
   b43ce:	4798      	blx	r3

	return true;
}
   b43d0:	2001      	movs	r0, #1
   b43d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b43d4 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b43d4:	2200      	movs	r2, #0
   b43d6:	7002      	strb	r2, [r0, #0]
   b43d8:	7042      	strb	r2, [r0, #1]
   b43da:	7082      	strb	r2, [r0, #2]
   b43dc:	70c2      	strb	r2, [r0, #3]
   b43de:	7102      	strb	r2, [r0, #4]
   b43e0:	7142      	strb	r2, [r0, #5]
   b43e2:	7182      	strb	r2, [r0, #6]
   b43e4:	71c2      	strb	r2, [r0, #7]
   b43e6:	7202      	strb	r2, [r0, #8]
   b43e8:	7242      	strb	r2, [r0, #9]
   b43ea:	7282      	strb	r2, [r0, #10]
}
   b43ec:	4770      	bx	lr

000b43ee <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b43ee:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b43f0:	f041 0107 	orr.w	r1, r1, #7
   b43f4:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b43f6:	7102      	strb	r2, [r0, #4]
   b43f8:	7082      	strb	r2, [r0, #2]
   b43fa:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b43fc:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b43fe:	7242      	strb	r2, [r0, #9]
}
   b4400:	4770      	bx	lr
	...

000b4404 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b4404:	4a02      	ldr	r2, [pc, #8]	; (b4410 <_ZN6LIS3DHC1Ei+0xc>)
   b4406:	e9c0 2100 	strd	r2, r1, [r0]
   b440a:	2200      	movs	r2, #0
   b440c:	7202      	strb	r2, [r0, #8]
}
   b440e:	4770      	bx	lr
   b4410:	000b6a90 	.word	0x000b6a90

000b4414 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b4414:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b4416:	6803      	ldr	r3, [r0, #0]
   b4418:	aa01      	add	r2, sp, #4
   b441a:	68dc      	ldr	r4, [r3, #12]
   b441c:	2301      	movs	r3, #1
   b441e:	47a0      	blx	r4
}
   b4420:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b4424:	b002      	add	sp, #8
   b4426:	bd10      	pop	{r4, pc}

000b4428 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b4428:	b538      	push	{r3, r4, r5, lr}
   b442a:	4605      	mov	r5, r0
   b442c:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b442e:	210f      	movs	r1, #15
   b4430:	4628      	mov	r0, r5
   b4432:	f7ff ffef 	bl	b4414 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b4436:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b4438:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b443c:	d004      	beq.n	b4448 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b443e:	f001 fdcf 	bl	b5fe0 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b4442:	3c01      	subs	r4, #1
   b4444:	d1f3      	bne.n	b442e <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b4446:	4620      	mov	r0, r4
}
   b4448:	bd38      	pop	{r3, r4, r5, pc}

000b444a <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   b444a:	b510      	push	{r4, lr}
   b444c:	4604      	mov	r4, r0
	spi.begin(ss);
   b444e:	8a01      	ldrh	r1, [r0, #16]
   b4450:	68c0      	ldr	r0, [r0, #12]
   b4452:	f001 fc63 	bl	b5d1c <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   b4456:	4620      	mov	r0, r4
}
   b4458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   b445c:	f7ff bfe4 	b.w	b4428 <_ZN6LIS3DH9hasDeviceEv>

000b4460 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b4460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4462:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b4464:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b4466:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b4468:	f7ff ffd4 	bl	b4414 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b446c:	f000 0008 	and.w	r0, r0, #8
   b4470:	2800      	cmp	r0, #0
   b4472:	bf14      	ite	ne
   b4474:	2601      	movne	r6, #1
   b4476:	2600      	moveq	r6, #0
	if (hasData) {
   b4478:	d00f      	beq.n	b449a <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b447a:	682b      	ldr	r3, [r5, #0]
   b447c:	466a      	mov	r2, sp
   b447e:	68df      	ldr	r7, [r3, #12]
   b4480:	2128      	movs	r1, #40	; 0x28
   b4482:	2306      	movs	r3, #6
   b4484:	4628      	mov	r0, r5
   b4486:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b4488:	f8bd 3000 	ldrh.w	r3, [sp]
   b448c:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b448e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b4492:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b4494:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b4498:	80a3      	strh	r3, [r4, #4]
}
   b449a:	4630      	mov	r0, r6
   b449c:	b003      	add	sp, #12
   b449e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b44a0 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b44a0:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b44a2:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b44a4:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b44a8:	691c      	ldr	r4, [r3, #16]
   b44aa:	aa01      	add	r2, sp, #4
   b44ac:	2301      	movs	r3, #1
   b44ae:	47a0      	blx	r4
}
   b44b0:	b002      	add	sp, #8
   b44b2:	bd10      	pop	{r4, pc}

000b44b4 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b44b4:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b44b6:	6803      	ldr	r3, [r0, #0]
   b44b8:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b44ba:	4604      	mov	r4, r0
   b44bc:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b44be:	4798      	blx	r3
   b44c0:	4606      	mov	r6, r0
   b44c2:	b930      	cbnz	r0, b44d2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b44c4:	f001 ff08 	bl	b62d8 <_Z16_fetch_usbserialv>
   b44c8:	4927      	ldr	r1, [pc, #156]	; (b4568 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b44ca:	f001 fd1e 	bl	b5f0a <_ZN5Print7printlnEPKc>
}
   b44ce:	4630      	mov	r0, r6
   b44d0:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b44d2:	782a      	ldrb	r2, [r5, #0]
   b44d4:	2120      	movs	r1, #32
   b44d6:	4620      	mov	r0, r4
   b44d8:	f7ff ffe2 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b44dc:	786a      	ldrb	r2, [r5, #1]
   b44de:	2121      	movs	r1, #33	; 0x21
   b44e0:	4620      	mov	r0, r4
   b44e2:	f7ff ffdd 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b44e6:	78aa      	ldrb	r2, [r5, #2]
   b44e8:	2122      	movs	r1, #34	; 0x22
   b44ea:	4620      	mov	r0, r4
   b44ec:	f7ff ffd8 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b44f0:	78ea      	ldrb	r2, [r5, #3]
   b44f2:	2123      	movs	r1, #35	; 0x23
   b44f4:	4620      	mov	r0, r4
   b44f6:	f7ff ffd3 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b44fa:	792a      	ldrb	r2, [r5, #4]
   b44fc:	2124      	movs	r1, #36	; 0x24
   b44fe:	4620      	mov	r0, r4
   b4500:	f7ff ffce 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b4504:	796a      	ldrb	r2, [r5, #5]
   b4506:	2125      	movs	r1, #37	; 0x25
   b4508:	4620      	mov	r0, r4
   b450a:	f7ff ffc9 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b450e:	79ab      	ldrb	r3, [r5, #6]
   b4510:	b11b      	cbz	r3, b451a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b4512:	2126      	movs	r1, #38	; 0x26
   b4514:	4620      	mov	r0, r4
   b4516:	f7ff ff7d 	bl	b4414 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b451a:	7aaa      	ldrb	r2, [r5, #10]
   b451c:	212e      	movs	r1, #46	; 0x2e
   b451e:	4620      	mov	r0, r4
   b4520:	f7ff ffbe 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b4524:	78ab      	ldrb	r3, [r5, #2]
   b4526:	065b      	lsls	r3, r3, #25
   b4528:	d5d1      	bpl.n	b44ce <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b452a:	79ea      	ldrb	r2, [r5, #7]
   b452c:	2132      	movs	r1, #50	; 0x32
   b452e:	4620      	mov	r0, r4
   b4530:	f7ff ffb6 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b4534:	7a2a      	ldrb	r2, [r5, #8]
   b4536:	2133      	movs	r1, #51	; 0x33
   b4538:	4620      	mov	r0, r4
   b453a:	f7ff ffb1 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b453e:	6863      	ldr	r3, [r4, #4]
   b4540:	2b00      	cmp	r3, #0
   b4542:	db0a      	blt.n	b455a <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b4544:	7a6a      	ldrb	r2, [r5, #9]
   b4546:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b4548:	4620      	mov	r0, r4
   b454a:	2130      	movs	r1, #48	; 0x30
   b454c:	f7ff ffa8 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b4550:	2131      	movs	r1, #49	; 0x31
   b4552:	4620      	mov	r0, r4
   b4554:	f7ff ff5e 	bl	b4414 <_ZN6LIS3DH13readRegister8Eh>
   b4558:	e7b9      	b.n	b44ce <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b455a:	2200      	movs	r2, #0
   b455c:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b455e:	2130      	movs	r1, #48	; 0x30
   b4560:	4620      	mov	r0, r4
   b4562:	f7ff ff9d 	bl	b44a0 <_ZN6LIS3DH14writeRegister8Ehh>
   b4566:	e7b2      	b.n	b44ce <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b4568:	000b6a74 	.word	0x000b6a74

000b456c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4570:	b085      	sub	sp, #20
   b4572:	461f      	mov	r7, r3
   b4574:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4578:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b457c:	eba8 0902 	sub.w	r9, r8, r2
   b4580:	eba7 0a01 	sub.w	sl, r7, r1
   b4584:	f1b9 0f00 	cmp.w	r9, #0
   b4588:	bfb8      	it	lt
   b458a:	f1c9 0900 	rsblt	r9, r9, #0
   b458e:	f1ba 0f00 	cmp.w	sl, #0
   b4592:	bfb8      	it	lt
   b4594:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4598:	45d1      	cmp	r9, sl
        uint16_t color) {
   b459a:	4683      	mov	fp, r0
   b459c:	460c      	mov	r4, r1
   b459e:	4615      	mov	r5, r2
    if (steep) {
   b45a0:	dd04      	ble.n	b45ac <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b45a2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b45a4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b45a6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b45a8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b45aa:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b45ac:	42bc      	cmp	r4, r7
   b45ae:	dd05      	ble.n	b45bc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b45b0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b45b2:	4645      	mov	r5, r8
   b45b4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b45b6:	4622      	mov	r2, r4
   b45b8:	463c      	mov	r4, r7
   b45ba:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b45bc:	1b3e      	subs	r6, r7, r4
   b45be:	b2b2      	uxth	r2, r6
   b45c0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b45c2:	eba8 0205 	sub.w	r2, r8, r5
   b45c6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b45ca:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b45ce:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b45d2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b45d6:	4545      	cmp	r5, r8
   b45d8:	bfb4      	ite	lt
   b45da:	2201      	movlt	r2, #1
   b45dc:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b45e0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b45e2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b45e4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b45e6:	42bc      	cmp	r4, r7
   b45e8:	dc1c      	bgt.n	b4624 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b45ea:	f8db 2000 	ldr.w	r2, [fp]
   b45ee:	9303      	str	r3, [sp, #12]
        if (steep) {
   b45f0:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b45f2:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b45f6:	bfc7      	ittee	gt
   b45f8:	4629      	movgt	r1, r5
   b45fa:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b45fc:	462a      	movle	r2, r5
   b45fe:	4621      	movle	r1, r4
   b4600:	4658      	mov	r0, fp
   b4602:	47c0      	blx	r8
        }
        err -= dy;
   b4604:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4606:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4608:	1ab6      	subs	r6, r6, r2
   b460a:	b2b1      	uxth	r1, r6
   b460c:	b236      	sxth	r6, r6
        if (err < 0) {
   b460e:	2e00      	cmp	r6, #0
   b4610:	da05      	bge.n	b461e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4612:	9a02      	ldr	r2, [sp, #8]
   b4614:	4415      	add	r5, r2
            err += dx;
   b4616:	9a00      	ldr	r2, [sp, #0]
   b4618:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b461a:	b22d      	sxth	r5, r5
            err += dx;
   b461c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b461e:	3401      	adds	r4, #1
   b4620:	b224      	sxth	r4, r4
   b4622:	e7e0      	b.n	b45e6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4624:	b005      	add	sp, #20
   b4626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b462a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b462a:	4770      	bx	lr

000b462c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b462c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b462e:	6804      	ldr	r4, [r0, #0]
   b4630:	6924      	ldr	r4, [r4, #16]
   b4632:	46a4      	mov	ip, r4
}
   b4634:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4638:	4760      	bx	ip

000b463a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b463a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b463c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b463e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4642:	9502      	str	r5, [sp, #8]
   b4644:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4646:	46a4      	mov	ip, r4
}
   b4648:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b464a:	4760      	bx	ip

000b464c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b464c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b464e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4650:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4654:	9502      	str	r5, [sp, #8]
   b4656:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4658:	46a4      	mov	ip, r4
}
   b465a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b465c:	4760      	bx	ip

000b465e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b465e:	b470      	push	{r4, r5, r6}
   b4660:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4664:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4668:	6804      	ldr	r4, [r0, #0]
   b466a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b466e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4670:	46a4      	mov	ip, r4
}
   b4672:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4674:	4760      	bx	ip

000b4676 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4676:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b467a:	461c      	mov	r4, r3
    startWrite();
   b467c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b467e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4682:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4684:	4605      	mov	r5, r0
   b4686:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4688:	3c01      	subs	r4, #1
   b468a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b468c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b468e:	b224      	sxth	r4, r4
    startWrite();
   b4690:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4692:	682b      	ldr	r3, [r5, #0]
   b4694:	f8cd 8004 	str.w	r8, [sp, #4]
   b4698:	9400      	str	r4, [sp, #0]
   b469a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b469c:	4628      	mov	r0, r5
   b469e:	463b      	mov	r3, r7
   b46a0:	4632      	mov	r2, r6
   b46a2:	4639      	mov	r1, r7
   b46a4:	47a0      	blx	r4
    endWrite();
   b46a6:	682b      	ldr	r3, [r5, #0]
   b46a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46aa:	4628      	mov	r0, r5
}
   b46ac:	b002      	add	sp, #8
   b46ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b46b2:	4718      	bx	r3

000b46b4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b46b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b46b8:	461d      	mov	r5, r3
    startWrite();
   b46ba:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b46bc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b46c0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b46c2:	4604      	mov	r4, r0
   b46c4:	4617      	mov	r7, r2
   b46c6:	460e      	mov	r6, r1
    startWrite();
   b46c8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b46ca:	e9cd 7800 	strd	r7, r8, [sp]
   b46ce:	6822      	ldr	r2, [r4, #0]
   b46d0:	1e6b      	subs	r3, r5, #1
   b46d2:	4433      	add	r3, r6
   b46d4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b46d6:	4620      	mov	r0, r4
   b46d8:	b21b      	sxth	r3, r3
   b46da:	463a      	mov	r2, r7
   b46dc:	4631      	mov	r1, r6
   b46de:	47a8      	blx	r5
    endWrite();
   b46e0:	6823      	ldr	r3, [r4, #0]
   b46e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46e4:	4620      	mov	r0, r4
}
   b46e6:	b002      	add	sp, #8
   b46e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b46ec:	4718      	bx	r3

000b46ee <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b46ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b46f2:	461e      	mov	r6, r3
    startWrite();
   b46f4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b46f6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b46fa:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b46fc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4700:	460c      	mov	r4, r1
   b4702:	4605      	mov	r5, r0
   b4704:	4617      	mov	r7, r2
    startWrite();
   b4706:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4708:	4426      	add	r6, r4
   b470a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b470c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b470e:	da0b      	bge.n	b4728 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4710:	f8cd 8000 	str.w	r8, [sp]
   b4714:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4718:	4621      	mov	r1, r4
   b471a:	464b      	mov	r3, r9
   b471c:	463a      	mov	r2, r7
   b471e:	4628      	mov	r0, r5
   b4720:	3401      	adds	r4, #1
   b4722:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4724:	b224      	sxth	r4, r4
   b4726:	e7f0      	b.n	b470a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b472a:	4628      	mov	r0, r5
}
   b472c:	b002      	add	sp, #8
   b472e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4732:	4718      	bx	r3

000b4734 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4734:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4736:	6802      	ldr	r2, [r0, #0]
   b4738:	9101      	str	r1, [sp, #4]
   b473a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b473e:	9100      	str	r1, [sp, #0]
   b4740:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4742:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4746:	2200      	movs	r2, #0
   b4748:	4611      	mov	r1, r2
   b474a:	47a0      	blx	r4
}
   b474c:	b002      	add	sp, #8
   b474e:	bd10      	pop	{r4, pc}

000b4750 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4754:	4299      	cmp	r1, r3
        uint16_t color) {
   b4756:	4616      	mov	r6, r2
   b4758:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b475c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4760:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4762:	4680      	mov	r8, r0
   b4764:	460d      	mov	r5, r1
   b4766:	461c      	mov	r4, r3
    if(x0 == x1){
   b4768:	d113      	bne.n	b4792 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b476a:	42be      	cmp	r6, r7
   b476c:	bfc8      	it	gt
   b476e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4770:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4774:	bfc4      	itt	gt
   b4776:	463e      	movgt	r6, r7
   b4778:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b477a:	1c7b      	adds	r3, r7, #1
   b477c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b477e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4780:	b21b      	sxth	r3, r3
   b4782:	4632      	mov	r2, r6
   b4784:	4629      	mov	r1, r5
   b4786:	4640      	mov	r0, r8
   b4788:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b478a:	b003      	add	sp, #12
   b478c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4790:	4760      	bx	ip
    } else if(y0 == y1){
   b4792:	42be      	cmp	r6, r7
   b4794:	d10a      	bne.n	b47ac <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4796:	4299      	cmp	r1, r3
   b4798:	bfc2      	ittt	gt
   b479a:	460b      	movgt	r3, r1
   b479c:	4625      	movgt	r5, r4
   b479e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b47a0:	1c63      	adds	r3, r4, #1
   b47a2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b47a6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b47a8:	1b5b      	subs	r3, r3, r5
   b47aa:	e7e9      	b.n	b4780 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b47ac:	6953      	ldr	r3, [r2, #20]
   b47ae:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b47b0:	e9cd 7900 	strd	r7, r9, [sp]
   b47b4:	f8d8 3000 	ldr.w	r3, [r8]
   b47b8:	4640      	mov	r0, r8
   b47ba:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b47bc:	4632      	mov	r2, r6
   b47be:	4623      	mov	r3, r4
   b47c0:	4629      	mov	r1, r5
   b47c2:	47b8      	blx	r7
        endWrite();
   b47c4:	f8d8 3000 	ldr.w	r3, [r8]
   b47c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47ca:	4640      	mov	r0, r8
}
   b47cc:	b003      	add	sp, #12
   b47ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b47d2:	4718      	bx	r3

000b47d4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b47d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b47d8:	461d      	mov	r5, r3
    startWrite();
   b47da:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b47dc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b47e0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b47e2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b47e6:	4604      	mov	r4, r0
   b47e8:	460f      	mov	r7, r1
   b47ea:	4616      	mov	r6, r2
    startWrite();
   b47ec:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b47ee:	6823      	ldr	r3, [r4, #0]
   b47f0:	f8cd 8000 	str.w	r8, [sp]
   b47f4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b47f8:	4632      	mov	r2, r6
   b47fa:	462b      	mov	r3, r5
   b47fc:	4639      	mov	r1, r7
   b47fe:	4620      	mov	r0, r4
   b4800:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4802:	6823      	ldr	r3, [r4, #0]
   b4804:	f8cd 8000 	str.w	r8, [sp]
   b4808:	f109 32ff 	add.w	r2, r9, #4294967295
   b480c:	4432      	add	r2, r6
   b480e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4812:	4639      	mov	r1, r7
   b4814:	462b      	mov	r3, r5
   b4816:	4620      	mov	r0, r4
   b4818:	b212      	sxth	r2, r2
   b481a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b481c:	6823      	ldr	r3, [r4, #0]
   b481e:	f8cd 8000 	str.w	r8, [sp]
   b4822:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4826:	4632      	mov	r2, r6
   b4828:	464b      	mov	r3, r9
   b482a:	4639      	mov	r1, r7
   b482c:	4620      	mov	r0, r4
   b482e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4830:	1e6b      	subs	r3, r5, #1
   b4832:	19d9      	adds	r1, r3, r7
   b4834:	6823      	ldr	r3, [r4, #0]
   b4836:	f8cd 8000 	str.w	r8, [sp]
   b483a:	6a1d      	ldr	r5, [r3, #32]
   b483c:	4620      	mov	r0, r4
   b483e:	464b      	mov	r3, r9
   b4840:	4632      	mov	r2, r6
   b4842:	b209      	sxth	r1, r1
   b4844:	47a8      	blx	r5
    endWrite();
   b4846:	6823      	ldr	r3, [r4, #0]
   b4848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b484a:	4620      	mov	r0, r4
}
   b484c:	b002      	add	sp, #8
   b484e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4852:	4718      	bx	r3

000b4854 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4854:	4770      	bx	lr

000b4856 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4856:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b485a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b485e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4860:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4862:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4866:	bf59      	ittee	pl
   b4868:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b486a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b486c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b486e:	81c3      	strhmi	r3, [r0, #14]
}
   b4870:	4770      	bx	lr
	...

000b4874 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4874:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4876:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4878:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b487a:	4a07      	ldr	r2, [pc, #28]	; (b4898 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b487c:	4d07      	ldr	r5, [pc, #28]	; (b489c <_ZN12Adafruit_GFXC1Ess+0x28>)
   b487e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4880:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4882:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4884:	f04f 31ff 	mov.w	r1, #4294967295
   b4888:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b488c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b488e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4890:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4892:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4894:	6204      	str	r4, [r0, #32]
}
   b4896:	bd30      	pop	{r4, r5, pc}
   b4898:	01000101 	.word	0x01000101
   b489c:	000b6fd0 	.word	0x000b6fd0

000b48a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b48a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48a4:	b089      	sub	sp, #36	; 0x24
   b48a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b48aa:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b48ac:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b48b0:	9304      	str	r3, [sp, #16]
   b48b2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b48b6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b48b8:	9305      	str	r3, [sp, #20]
   b48ba:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b48be:	4604      	mov	r4, r0
    startWrite();
   b48c0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b48c2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b48c6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b48ca:	bf48      	it	mi
   b48cc:	f108 020e 	addmi.w	r2, r8, #14
   b48d0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b48d4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b48d6:	4635      	mov	r5, r6
   b48d8:	9b03      	ldr	r3, [sp, #12]
   b48da:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b48dc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b48e0:	189a      	adds	r2, r3, r2
   b48e2:	9b05      	ldr	r3, [sp, #20]
   b48e4:	428b      	cmp	r3, r1
   b48e6:	b212      	sxth	r2, r2
   b48e8:	dd27      	ble.n	b493a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b48ea:	9b04      	ldr	r3, [sp, #16]
   b48ec:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b48ee:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b48f2:	9306      	str	r3, [sp, #24]
   b48f4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b48f8:	4580      	cmp	r8, r0
   b48fa:	fa1f f189 	uxth.w	r1, r9
   b48fe:	dd17      	ble.n	b4930 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4900:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4902:	bf05      	ittet	eq
   b4904:	9b06      	ldreq	r3, [sp, #24]
   b4906:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4908:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b490a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b490c:	bf18      	it	ne
   b490e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4910:	062b      	lsls	r3, r5, #24
   b4912:	d50a      	bpl.n	b492a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4914:	9b02      	ldr	r3, [sp, #8]
   b4916:	6820      	ldr	r0, [r4, #0]
   b4918:	9207      	str	r2, [sp, #28]
   b491a:	4419      	add	r1, r3
   b491c:	6983      	ldr	r3, [r0, #24]
   b491e:	b209      	sxth	r1, r1
   b4920:	461f      	mov	r7, r3
   b4922:	4620      	mov	r0, r4
   b4924:	4653      	mov	r3, sl
   b4926:	47b8      	blx	r7
   b4928:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b492a:	f109 0901 	add.w	r9, r9, #1
   b492e:	e7e1      	b.n	b48f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4930:	9b01      	ldr	r3, [sp, #4]
   b4932:	3301      	adds	r3, #1
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	445e      	add	r6, fp
   b4938:	e7ce      	b.n	b48d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b493a:	6823      	ldr	r3, [r4, #0]
   b493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b493e:	4620      	mov	r0, r4
}
   b4940:	b009      	add	sp, #36	; 0x24
   b4942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4946:	4718      	bx	r3

000b4948 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b494c:	ed2d 8b02 	vpush	{d8}
   b4950:	b091      	sub	sp, #68	; 0x44
   b4952:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4954:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4956:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b495a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b495e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4962:	9103      	str	r1, [sp, #12]
   b4964:	461f      	mov	r7, r3
   b4966:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b496a:	9304      	str	r3, [sp, #16]
   b496c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b496e:	2a00      	cmp	r2, #0
   b4970:	f040 80c5 	bne.w	b4afe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4974:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4978:	428b      	cmp	r3, r1
   b497a:	f340 814c 	ble.w	b4c16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b497e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4982:	42b3      	cmp	r3, r6
   b4984:	f340 8147 	ble.w	b4c16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4988:	2306      	movs	r3, #6
   b498a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b498e:	2b00      	cmp	r3, #0
   b4990:	f340 8141 	ble.w	b4c16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4994:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4998:	2b00      	cmp	r3, #0
   b499a:	f340 813c 	ble.w	b4c16 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b499e:	7f03      	ldrb	r3, [r0, #28]
   b49a0:	b91b      	cbnz	r3, b49aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b49a2:	2faf      	cmp	r7, #175	; 0xaf
   b49a4:	bf84      	itt	hi
   b49a6:	3701      	addhi	r7, #1
   b49a8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b49aa:	f8db 3000 	ldr.w	r3, [fp]
   b49ae:	4658      	mov	r0, fp
   b49b0:	695b      	ldr	r3, [r3, #20]
   b49b2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b49b4:	2205      	movs	r2, #5
   b49b6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b49b8:	2200      	movs	r2, #0
   b49ba:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b49bc:	4a98      	ldr	r2, [pc, #608]	; (b4c20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b49be:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b49c2:	18d3      	adds	r3, r2, r3
   b49c4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b49c6:	b2b3      	uxth	r3, r6
   b49c8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b49ca:	9a05      	ldr	r2, [sp, #20]
   b49cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b49ce:	5c9b      	ldrb	r3, [r3, r2]
   b49d0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b49d2:	b2ab      	uxth	r3, r5
   b49d4:	930b      	str	r3, [sp, #44]	; 0x2c
   b49d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b49da:	9308      	str	r3, [sp, #32]
   b49dc:	9b03      	ldr	r3, [sp, #12]
   b49de:	fb02 f905 	mul.w	r9, r2, r5
   b49e2:	fa19 f983 	uxtah	r9, r9, r3
   b49e6:	fa0f f389 	sxth.w	r3, r9
   b49ea:	ee08 3a10 	vmov	s16, r3
   b49ee:	2308      	movs	r3, #8
   b49f0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b49f2:	9b03      	ldr	r3, [sp, #12]
   b49f4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b49f8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b49fc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4a00:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4a02:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4a06:	07d2      	lsls	r2, r2, #31
   b4a08:	d552      	bpl.n	b4ab0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4a0a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4a0c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4a10:	d13e      	bne.n	b4a90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4a12:	2c01      	cmp	r4, #1
   b4a14:	d13c      	bne.n	b4a90 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4a16:	699b      	ldr	r3, [r3, #24]
   b4a18:	9906      	ldr	r1, [sp, #24]
   b4a1a:	461f      	mov	r7, r3
   b4a1c:	9b04      	ldr	r3, [sp, #16]
   b4a1e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4a20:	b212      	sxth	r2, r2
   b4a22:	4651      	mov	r1, sl
   b4a24:	4658      	mov	r0, fp
   b4a26:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4a28:	f109 0301 	add.w	r3, r9, #1
   b4a2c:	fa4f f983 	sxtb.w	r9, r3
   b4a30:	9b07      	ldr	r3, [sp, #28]
   b4a32:	085b      	lsrs	r3, r3, #1
   b4a34:	9307      	str	r3, [sp, #28]
   b4a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4a38:	3b01      	subs	r3, #1
   b4a3a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4a3e:	930a      	str	r3, [sp, #40]	; 0x28
   b4a40:	d1de      	bne.n	b4a00 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4a42:	9f05      	ldr	r7, [sp, #20]
   b4a44:	3701      	adds	r7, #1
   b4a46:	b27b      	sxtb	r3, r7
   b4a48:	9305      	str	r3, [sp, #20]
   b4a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4a4c:	3b01      	subs	r3, #1
   b4a4e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4a52:	9309      	str	r3, [sp, #36]	; 0x24
   b4a54:	d1b9      	bne.n	b49ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4a56:	9b04      	ldr	r3, [sp, #16]
   b4a58:	4543      	cmp	r3, r8
   b4a5a:	d00f      	beq.n	b4a7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4a5c:	2d01      	cmp	r5, #1
   b4a5e:	f8db 3000 	ldr.w	r3, [fp]
   b4a62:	d13b      	bne.n	b4adc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4a64:	2c01      	cmp	r4, #1
   b4a66:	d139      	bne.n	b4adc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4a68:	9908      	ldr	r1, [sp, #32]
   b4a6a:	f8cd 8000 	str.w	r8, [sp]
   b4a6e:	3105      	adds	r1, #5
   b4a70:	6a1c      	ldr	r4, [r3, #32]
   b4a72:	4632      	mov	r2, r6
   b4a74:	2308      	movs	r3, #8
   b4a76:	b209      	sxth	r1, r1
   b4a78:	4658      	mov	r0, fp
   b4a7a:	47a0      	blx	r4
        endWrite();
   b4a7c:	f8db 3000 	ldr.w	r3, [fp]
   b4a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a82:	4658      	mov	r0, fp
}
   b4a84:	b011      	add	sp, #68	; 0x44
   b4a86:	ecbd 8b02 	vpop	{d8}
   b4a8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4a8e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4a90:	9906      	ldr	r1, [sp, #24]
   b4a92:	fb14 f202 	smulbb	r2, r4, r2
   b4a96:	440a      	add	r2, r1
   b4a98:	9904      	ldr	r1, [sp, #16]
   b4a9a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4a9c:	9400      	str	r4, [sp, #0]
   b4a9e:	69db      	ldr	r3, [r3, #28]
   b4aa0:	ee18 1a10 	vmov	r1, s16
   b4aa4:	461f      	mov	r7, r3
   b4aa6:	b212      	sxth	r2, r2
   b4aa8:	462b      	mov	r3, r5
   b4aaa:	4658      	mov	r0, fp
   b4aac:	47b8      	blx	r7
   b4aae:	e7bb      	b.n	b4a28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4ab0:	9a04      	ldr	r2, [sp, #16]
   b4ab2:	4542      	cmp	r2, r8
   b4ab4:	d0b8      	beq.n	b4a28 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b4ab6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4ab8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4abc:	d107      	bne.n	b4ace <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4abe:	2c01      	cmp	r4, #1
   b4ac0:	d105      	bne.n	b4ace <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4ac2:	699b      	ldr	r3, [r3, #24]
   b4ac4:	9906      	ldr	r1, [sp, #24]
   b4ac6:	461f      	mov	r7, r3
   b4ac8:	440a      	add	r2, r1
   b4aca:	4643      	mov	r3, r8
   b4acc:	e7a8      	b.n	b4a20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4ace:	9906      	ldr	r1, [sp, #24]
   b4ad0:	f8cd 8004 	str.w	r8, [sp, #4]
   b4ad4:	fb14 f202 	smulbb	r2, r4, r2
   b4ad8:	440a      	add	r2, r1
   b4ada:	e7df      	b.n	b4a9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4ade:	f8cd 8004 	str.w	r8, [sp, #4]
   b4ae2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4ae6:	9a08      	ldr	r2, [sp, #32]
   b4ae8:	00e4      	lsls	r4, r4, #3
   b4aea:	440a      	add	r2, r1
   b4aec:	4611      	mov	r1, r2
   b4aee:	9400      	str	r4, [sp, #0]
   b4af0:	69dc      	ldr	r4, [r3, #28]
   b4af2:	4632      	mov	r2, r6
   b4af4:	462b      	mov	r3, r5
   b4af6:	b209      	sxth	r1, r1
   b4af8:	4658      	mov	r0, fp
   b4afa:	47a0      	blx	r4
        endWrite();
   b4afc:	e7be      	b.n	b4a7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4afe:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4b00:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4b02:	6812      	ldr	r2, [r2, #0]
   b4b04:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4b06:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4b08:	b2ff      	uxtb	r7, r7
   b4b0a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4b0e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4b12:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4b14:	789a      	ldrb	r2, [r3, #2]
   b4b16:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4b18:	78da      	ldrb	r2, [r3, #3]
   b4b1a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4b1c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4b1e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4b22:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4b26:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4b28:	d801      	bhi.n	b4b2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4b2a:	2c01      	cmp	r4, #1
   b4b2c:	d957      	bls.n	b4bde <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4b2e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4b32:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4b34:	fa0f f38a 	sxth.w	r3, sl
   b4b38:	9307      	str	r3, [sp, #28]
        startWrite();
   b4b3a:	f8db 3000 	ldr.w	r3, [fp]
   b4b3e:	4658      	mov	r0, fp
   b4b40:	695b      	ldr	r3, [r3, #20]
   b4b42:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b44:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4b46:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b4a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b4c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4b50:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4b52:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b54:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4b58:	429f      	cmp	r7, r3
   b4b5a:	d28f      	bcs.n	b4a7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b5c:	9b07      	ldr	r3, [sp, #28]
   b4b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4b60:	443b      	add	r3, r7
   b4b62:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4b66:	2200      	movs	r2, #0
   b4b68:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b6c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b6e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b72:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b76:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b7a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4b7e:	9905      	ldr	r1, [sp, #20]
   b4b80:	4291      	cmp	r1, r2
   b4b82:	d241      	bcs.n	b4c08 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4b84:	1c5a      	adds	r2, r3, #1
   b4b86:	b2d2      	uxtb	r2, r2
   b4b88:	075b      	lsls	r3, r3, #29
   b4b8a:	920d      	str	r2, [sp, #52]	; 0x34
   b4b8c:	d107      	bne.n	b4b9e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4b8e:	9b06      	ldr	r3, [sp, #24]
   b4b90:	9906      	ldr	r1, [sp, #24]
   b4b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4b94:	3301      	adds	r3, #1
   b4b96:	b29b      	uxth	r3, r3
   b4b98:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4b9c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4b9e:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4ba2:	d012      	beq.n	b4bca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4ba4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4ba6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4baa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4bae:	d11a      	bne.n	b4be6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4bb0:	2c01      	cmp	r4, #1
   b4bb2:	d118      	bne.n	b4be6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4bb6:	699b      	ldr	r3, [r3, #24]
   b4bb8:	4411      	add	r1, r2
   b4bba:	9a05      	ldr	r2, [sp, #20]
   b4bbc:	4411      	add	r1, r2
   b4bbe:	461e      	mov	r6, r3
   b4bc0:	4652      	mov	r2, sl
   b4bc2:	9b04      	ldr	r3, [sp, #16]
   b4bc4:	b209      	sxth	r1, r1
   b4bc6:	4658      	mov	r0, fp
   b4bc8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4bca:	9e05      	ldr	r6, [sp, #20]
   b4bcc:	3601      	adds	r6, #1
   b4bce:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4bd0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4bd4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4bd6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4bdc:	e7ce      	b.n	b4b7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4bde:	2300      	movs	r3, #0
   b4be0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4be4:	e7a9      	b.n	b4b3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4be6:	9805      	ldr	r0, [sp, #20]
   b4be8:	9a08      	ldr	r2, [sp, #32]
   b4bea:	4402      	add	r2, r0
   b4bec:	fb02 1105 	mla	r1, r2, r5, r1
   b4bf0:	9a04      	ldr	r2, [sp, #16]
   b4bf2:	e9cd 4200 	strd	r4, r2, [sp]
   b4bf6:	69db      	ldr	r3, [r3, #28]
   b4bf8:	ee18 2a10 	vmov	r2, s16
   b4bfc:	461e      	mov	r6, r3
   b4bfe:	b209      	sxth	r1, r1
   b4c00:	462b      	mov	r3, r5
   b4c02:	4658      	mov	r0, fp
   b4c04:	47b0      	blx	r6
   b4c06:	e7e0      	b.n	b4bca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4c0a:	3701      	adds	r7, #1
   b4c0c:	4498      	add	r8, r3
   b4c0e:	fa5f f888 	uxtb.w	r8, r8
   b4c12:	b2ff      	uxtb	r7, r7
   b4c14:	e79f      	b.n	b4b56 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4c16:	b011      	add	sp, #68	; 0x44
   b4c18:	ecbd 8b02 	vpop	{d8}
   b4c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4c20:	000b6ac8 	.word	0x000b6ac8

000b4c24 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4c26:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4c28:	b085      	sub	sp, #20
   b4c2a:	4604      	mov	r4, r0
   b4c2c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4c2e:	2a00      	cmp	r2, #0
   b4c30:	d134      	bne.n	b4c9c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4c32:	290a      	cmp	r1, #10
   b4c34:	d108      	bne.n	b4c48 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4c36:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4c38:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4c3a:	7e42      	ldrb	r2, [r0, #25]
   b4c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4c40:	8263      	strh	r3, [r4, #18]
}
   b4c42:	2001      	movs	r0, #1
   b4c44:	b005      	add	sp, #20
   b4c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4c48:	290d      	cmp	r1, #13
   b4c4a:	d0fa      	beq.n	b4c42 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4c4c:	7ee1      	ldrb	r1, [r4, #27]
   b4c4e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4c50:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4c52:	b171      	cbz	r1, b4c72 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4c54:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4c58:	2106      	movs	r1, #6
   b4c5a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4c5e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4c62:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4c64:	bfc1      	itttt	gt
   b4c66:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4c6a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4c6c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4c70:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4c72:	8ae2      	ldrh	r2, [r4, #22]
   b4c74:	9201      	str	r2, [sp, #4]
   b4c76:	8aa2      	ldrh	r2, [r4, #20]
   b4c78:	9200      	str	r2, [sp, #0]
   b4c7a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4c7e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4c82:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4c86:	4620      	mov	r0, r4
   b4c88:	f7ff fe5e 	bl	b4948 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4c8c:	7e23      	ldrb	r3, [r4, #24]
   b4c8e:	8a22      	ldrh	r2, [r4, #16]
   b4c90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4c94:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4c98:	8223      	strh	r3, [r4, #16]
   b4c9a:	e7d2      	b.n	b4c42 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4c9c:	290a      	cmp	r1, #10
   b4c9e:	d107      	bne.n	b4cb0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4ca0:	2300      	movs	r3, #0
   b4ca2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4ca4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4ca6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4ca8:	8a43      	ldrh	r3, [r0, #18]
   b4caa:	fb01 3302 	mla	r3, r1, r2, r3
   b4cae:	e7c7      	b.n	b4c40 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4cb0:	290d      	cmp	r1, #13
   b4cb2:	d0c6      	beq.n	b4c42 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4cb4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4cb6:	42a9      	cmp	r1, r5
   b4cb8:	d3c3      	bcc.n	b4c42 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4cba:	7a51      	ldrb	r1, [r2, #9]
   b4cbc:	4299      	cmp	r1, r3
   b4cbe:	d3c0      	bcc.n	b4c42 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4cc0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4cc2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4cc4:	b2ed      	uxtb	r5, r5
   b4cc6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4cca:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4ccc:	b328      	cbz	r0, b4d1a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4cce:	78e9      	ldrb	r1, [r5, #3]
   b4cd0:	b319      	cbz	r1, b4d1a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4cd2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4cd4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4cd6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4cd8:	b191      	cbz	r1, b4d00 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4cda:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4cde:	4408      	add	r0, r1
   b4ce0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4ce4:	fb06 1100 	mla	r1, r6, r0, r1
   b4ce8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4cec:	4281      	cmp	r1, r0
   b4cee:	dd07      	ble.n	b4d00 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4cf0:	2000      	movs	r0, #0
   b4cf2:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4cf4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4cf8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4cfa:	fb02 1207 	mla	r2, r2, r7, r1
   b4cfe:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4d00:	8ae2      	ldrh	r2, [r4, #22]
   b4d02:	9201      	str	r2, [sp, #4]
   b4d04:	8aa2      	ldrh	r2, [r4, #20]
   b4d06:	9200      	str	r2, [sp, #0]
   b4d08:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4d0c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4d10:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4d14:	4620      	mov	r0, r4
   b4d16:	f7ff fe17 	bl	b4948 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4d1a:	7929      	ldrb	r1, [r5, #4]
   b4d1c:	7e22      	ldrb	r2, [r4, #24]
   b4d1e:	8a23      	ldrh	r3, [r4, #16]
   b4d20:	fb01 3302 	mla	r3, r1, r2, r3
   b4d24:	e7b8      	b.n	b4c98 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4d26 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4d26:	2901      	cmp	r1, #1
   b4d28:	bf38      	it	cc
   b4d2a:	2101      	movcc	r1, #1
   b4d2c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4d2e:	7641      	strb	r1, [r0, #25]
}
   b4d30:	4770      	bx	lr
	...

000b4d34 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b4d34:	b510      	push	{r4, lr}
   b4d36:	4b06      	ldr	r3, [pc, #24]	; (b4d50 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b4d38:	6003      	str	r3, [r0, #0]
   b4d3a:	4604      	mov	r4, r0
	if (mutex) {
   b4d3c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b4d3e:	b108      	cbz	r0, b4d44 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b4d40:	f000 fd9e 	bl	b5880 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b4d44:	4620      	mov	r0, r4
   b4d46:	f000 f8d1 	bl	b4eec <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b4d4a:	4620      	mov	r0, r4
   b4d4c:	bd10      	pop	{r4, pc}
   b4d4e:	bf00      	nop
   b4d50:	000b7028 	.word	0x000b7028

000b4d54 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b4d54:	b510      	push	{r4, lr}
   b4d56:	4604      	mov	r4, r0
}
   b4d58:	f7ff ffec 	bl	b4d34 <_ZN16OledWingAdafruitD1Ev>
   b4d5c:	4620      	mov	r0, r4
   b4d5e:	2170      	movs	r1, #112	; 0x70
   b4d60:	f7ff f9a1 	bl	b40a6 <_ZdlPvj>
   b4d64:	4620      	mov	r0, r4
   b4d66:	bd10      	pop	{r4, pc}

000b4d68 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b4d68:	b530      	push	{r4, r5, lr}
   b4d6a:	b085      	sub	sp, #20
   b4d6c:	4604      	mov	r4, r0
   b4d6e:	460d      	mov	r5, r1
   b4d70:	f001 fd52 	bl	b6818 <_Z19__fetch_global_Wirev>
   b4d74:	4a10      	ldr	r2, [pc, #64]	; (b4db8 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b4d76:	4911      	ldr	r1, [pc, #68]	; (b4dbc <_ZN16OledWingAdafruitC1Ei+0x54>)
   b4d78:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b4d7c:	f04f 32ff 	mov.w	r2, #4294967295
   b4d80:	2180      	movs	r1, #128	; 0x80
   b4d82:	4603      	mov	r3, r0
   b4d84:	9200      	str	r2, [sp, #0]
   b4d86:	4620      	mov	r0, r4
   b4d88:	2220      	movs	r2, #32
   b4d8a:	f000 f927 	bl	b4fdc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b4d8e:	4b0c      	ldr	r3, [pc, #48]	; (b4dc0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b4d90:	6023      	str	r3, [r4, #0]
   b4d92:	2300      	movs	r3, #0
   b4d94:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b4d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4d9c:	f000 f854 	bl	b4e48 <_ZN8DebounceC1Ev>
   b4da0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4da4:	f000 f850 	bl	b4e48 <_ZN8DebounceC1Ev>
   b4da8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4dac:	f000 f84c 	bl	b4e48 <_ZN8DebounceC1Ev>
}
   b4db0:	4620      	mov	r0, r4
   b4db2:	b005      	add	sp, #20
   b4db4:	bd30      	pop	{r4, r5, pc}
   b4db6:	bf00      	nop
   b4db8:	00061a80 	.word	0x00061a80
   b4dbc:	000186a0 	.word	0x000186a0
   b4dc0:	000b7028 	.word	0x000b7028

000b4dc4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b4dc4:	b513      	push	{r0, r1, r4, lr}
   b4dc6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b4dc8:	3050      	adds	r0, #80	; 0x50
   b4dca:	f000 fd51 	bl	b5870 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b4dce:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4dd0:	07d9      	lsls	r1, r3, #31
   b4dd2:	d505      	bpl.n	b4de0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b4dd4:	2202      	movs	r2, #2
   b4dd6:	2104      	movs	r1, #4
   b4dd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4ddc:	f000 f848 	bl	b4e70 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b4de0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4de2:	079a      	lsls	r2, r3, #30
   b4de4:	d505      	bpl.n	b4df2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b4de6:	2200      	movs	r2, #0
   b4de8:	2103      	movs	r1, #3
   b4dea:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4dee:	f000 f83f 	bl	b4e70 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b4df2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4df4:	075b      	lsls	r3, r3, #29
   b4df6:	d505      	bpl.n	b4e04 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b4df8:	2202      	movs	r2, #2
   b4dfa:	4611      	mov	r1, r2
   b4dfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4e00:	f000 f836 	bl	b4e70 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4e04:	2301      	movs	r3, #1
   b4e06:	9300      	str	r3, [sp, #0]
   b4e08:	223c      	movs	r2, #60	; 0x3c
   b4e0a:	2102      	movs	r1, #2
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	f000 f9ed 	bl	b51ec <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b4e12:	b002      	add	sp, #8
   b4e14:	bd10      	pop	{r4, pc}

000b4e16 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b4e16:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b4e18:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b4e1a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b4e1c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b4e1e:	d502      	bpl.n	b4e26 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b4e20:	3058      	adds	r0, #88	; 0x58
   b4e22:	f000 f832 	bl	b4e8a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b4e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4e28:	079a      	lsls	r2, r3, #30
   b4e2a:	d503      	bpl.n	b4e34 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b4e2c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4e30:	f000 f82b 	bl	b4e8a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b4e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4e36:	075b      	lsls	r3, r3, #29
   b4e38:	d505      	bpl.n	b4e46 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b4e3a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b4e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b4e42:	f000 b822 	b.w	b4e8a <_ZN8Debounce6updateEv>
}
   b4e46:	bd10      	pop	{r4, pc}

000b4e48 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b4e48:	2100      	movs	r1, #0
   b4e4a:	220a      	movs	r2, #10
   b4e4c:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b4e50:	4770      	bx	lr

000b4e52 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b4e52:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b4e54:	b510      	push	{r4, lr}
   b4e56:	4604      	mov	r4, r0
    this->pin = pin;
   b4e58:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b4e5a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b4e5c:	b288      	uxth	r0, r1
   b4e5e:	f001 fc6d 	bl	b673c <digitalRead>
   b4e62:	b108      	cbz	r0, b4e68 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b4e64:	2303      	movs	r3, #3
   b4e66:	71a3      	strb	r3, [r4, #6]
   b4e68:	f000 fcfa 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b4e6c:	6020      	str	r0, [r4, #0]
#endif
}
   b4e6e:	bd10      	pop	{r4, pc}

000b4e70 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b4e70:	b538      	push	{r3, r4, r5, lr}
   b4e72:	460c      	mov	r4, r1
   b4e74:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b4e76:	4611      	mov	r1, r2
   b4e78:	b2a0      	uxth	r0, r4
   b4e7a:	f001 fc35 	bl	b66e8 <pinMode>
  
  this->attach(pin);
   b4e7e:	4621      	mov	r1, r4
   b4e80:	4628      	mov	r0, r5
}
   b4e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b4e86:	f7ff bfe4 	b.w	b4e52 <_ZN8Debounce6attachEi>

000b4e8a <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b4e8a:	b538      	push	{r3, r4, r5, lr}
   b4e8c:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b4e8e:	79c0      	ldrb	r0, [r0, #7]
   b4e90:	f001 fc54 	bl	b673c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b4e94:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b4e96:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b4e98:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b4e9c:	bf18      	it	ne
   b4e9e:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4ea0:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b4ea4:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b4ea6:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4ea8:	d00a      	beq.n	b4ec0 <_ZN8Debounce6updateEv+0x36>
   b4eaa:	f000 fcd9 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b4eae:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b4eb0:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b4eb2:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b4eb6:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b4eb8:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b4eba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4ebe:	bd38      	pop	{r3, r4, r5, pc}
   b4ec0:	f000 fcce 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b4ec4:	6823      	ldr	r3, [r4, #0]
   b4ec6:	1ac0      	subs	r0, r0, r3
   b4ec8:	88a3      	ldrh	r3, [r4, #4]
   b4eca:	4298      	cmp	r0, r3
   b4ecc:	d3f4      	bcc.n	b4eb8 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b4ece:	79a3      	ldrb	r3, [r4, #6]
   b4ed0:	f003 0301 	and.w	r3, r3, #1
   b4ed4:	42ab      	cmp	r3, r5
   b4ed6:	d0ef      	beq.n	b4eb8 <_ZN8Debounce6updateEv+0x2e>
   b4ed8:	f000 fcc2 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b4edc:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b4ede:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b4ee0:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b4ee4:	f043 0308 	orr.w	r3, r3, #8
   b4ee8:	e7e5      	b.n	b4eb6 <_ZN8Debounce6updateEv+0x2c>
	...

000b4eec <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4eec:	b510      	push	{r4, lr}
   b4eee:	4b04      	ldr	r3, [pc, #16]	; (b4f00 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4ef0:	6003      	str	r3, [r0, #0]
   b4ef2:	4604      	mov	r4, r0
  if(buffer) {
   b4ef4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ef6:	b108      	cbz	r0, b4efc <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4ef8:	f000 fe8e 	bl	b5c18 <free>
    buffer = NULL;
  }
}
   b4efc:	4620      	mov	r0, r4
   b4efe:	bd10      	pop	{r4, pc}
   b4f00:	000b7520 	.word	0x000b7520

000b4f04 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4f04:	b510      	push	{r4, lr}
   b4f06:	4604      	mov	r4, r0
}
   b4f08:	f7ff fff0 	bl	b4eec <_ZN16Adafruit_SSD1306D1Ev>
   b4f0c:	4620      	mov	r0, r4
   b4f0e:	2150      	movs	r1, #80	; 0x50
   b4f10:	f7ff f8c9 	bl	b40a6 <_ZdlPvj>
   b4f14:	4620      	mov	r0, r4
   b4f16:	bd10      	pop	{r4, pc}

000b4f18 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4f18:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4f1a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4f1c:	db4b      	blt.n	b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4f1e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4f22:	428c      	cmp	r4, r1
   b4f24:	dd47      	ble.n	b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4f26:	2a00      	cmp	r2, #0
   b4f28:	db45      	blt.n	b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4f2a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4f2e:	4294      	cmp	r4, r2
   b4f30:	dd41      	ble.n	b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4f32:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4f34:	2c02      	cmp	r4, #2
   b4f36:	d01f      	beq.n	b4f78 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4f38:	2c03      	cmp	r4, #3
   b4f3a:	d026      	beq.n	b4f8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4f3c:	2c01      	cmp	r4, #1
   b4f3e:	d104      	bne.n	b4f4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4f40:	8904      	ldrh	r4, [r0, #8]
   b4f42:	43d2      	mvns	r2, r2
   b4f44:	4414      	add	r4, r2
      break;
   b4f46:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4f48:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4f4a:	2b01      	cmp	r3, #1
   b4f4c:	d023      	beq.n	b4f96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4f4e:	2b02      	cmp	r3, #2
   b4f50:	d032      	beq.n	b4fb8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4f52:	bb83      	cbnz	r3, b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4f54:	2a00      	cmp	r2, #0
   b4f56:	4613      	mov	r3, r2
   b4f58:	8904      	ldrh	r4, [r0, #8]
   b4f5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4f5c:	bfb8      	it	lt
   b4f5e:	1dd3      	addlt	r3, r2, #7
   b4f60:	10db      	asrs	r3, r3, #3
   b4f62:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4f66:	f002 0207 	and.w	r2, r2, #7
   b4f6a:	2301      	movs	r3, #1
   b4f6c:	4093      	lsls	r3, r2
   b4f6e:	5c42      	ldrb	r2, [r0, r1]
   b4f70:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4f74:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4f76:	e01e      	b.n	b4fb6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4f78:	8904      	ldrh	r4, [r0, #8]
   b4f7a:	3c01      	subs	r4, #1
   b4f7c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4f7e:	8944      	ldrh	r4, [r0, #10]
   b4f80:	43d2      	mvns	r2, r2
   b4f82:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4f84:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4f86:	b212      	sxth	r2, r2
      break;
   b4f88:	e7df      	b.n	b4f4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4f8a:	8944      	ldrh	r4, [r0, #10]
   b4f8c:	3c01      	subs	r4, #1
   b4f8e:	1a64      	subs	r4, r4, r1
      break;
   b4f90:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4f92:	b222      	sxth	r2, r4
      break;
   b4f94:	e7d9      	b.n	b4f4a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4f96:	2a00      	cmp	r2, #0
   b4f98:	8904      	ldrh	r4, [r0, #8]
   b4f9a:	4613      	mov	r3, r2
   b4f9c:	bfb8      	it	lt
   b4f9e:	1dd3      	addlt	r3, r2, #7
   b4fa0:	10db      	asrs	r3, r3, #3
   b4fa2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4fa6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4fa8:	f002 0007 	and.w	r0, r2, #7
   b4fac:	2201      	movs	r2, #1
   b4fae:	4082      	lsls	r2, r0
   b4fb0:	5c58      	ldrb	r0, [r3, r1]
   b4fb2:	4302      	orrs	r2, r0
   b4fb4:	545a      	strb	r2, [r3, r1]
}
   b4fb6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4fb8:	2a00      	cmp	r2, #0
   b4fba:	4613      	mov	r3, r2
   b4fbc:	8904      	ldrh	r4, [r0, #8]
   b4fbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4fc0:	bfb8      	it	lt
   b4fc2:	1dd3      	addlt	r3, r2, #7
   b4fc4:	10db      	asrs	r3, r3, #3
   b4fc6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4fca:	f002 0207 	and.w	r2, r2, #7
   b4fce:	2301      	movs	r3, #1
   b4fd0:	fa03 f202 	lsl.w	r2, r3, r2
   b4fd4:	5c43      	ldrb	r3, [r0, r1]
   b4fd6:	405a      	eors	r2, r3
   b4fd8:	e7cc      	b.n	b4f74 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4fdc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4fdc:	b570      	push	{r4, r5, r6, lr}
   b4fde:	4604      	mov	r4, r0
   b4fe0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4fe2:	2600      	movs	r6, #0
   b4fe4:	f7ff fc46 	bl	b4874 <_ZN12Adafruit_GFXC1Ess>
   b4fe8:	4b11      	ldr	r3, [pc, #68]	; (b5030 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4fea:	6023      	str	r3, [r4, #0]
   b4fec:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4fee:	b915      	cbnz	r5, b4ff6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4ff0:	f001 fc12 	bl	b6818 <_Z19__fetch_global_Wirev>
   b4ff4:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4ff6:	23ff      	movs	r3, #255	; 0xff
   b4ff8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4ffc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5000:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5004:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5008:	4b0a      	ldr	r3, [pc, #40]	; (b5034 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b500a:	63a3      	str	r3, [r4, #56]	; 0x38
   b500c:	2301      	movs	r3, #1
   b500e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5012:	9b05      	ldr	r3, [sp, #20]
   b5014:	64a3      	str	r3, [r4, #72]	; 0x48
   b5016:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b501a:	9b06      	ldr	r3, [sp, #24]
   b501c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b501e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5022:	6426      	str	r6, [r4, #64]	; 0x40
   b5024:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5028:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b502a:	4620      	mov	r0, r4
   b502c:	bd70      	pop	{r4, r5, r6, pc}
   b502e:	bf00      	nop
   b5030:	000b7520 	.word	0x000b7520
   b5034:	000b6a68 	.word	0x000b6a68

000b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b503a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b503c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b503e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5040:	b190      	cbz	r0, b5068 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5042:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5046:	f001 fa17 	bl	b6478 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b504a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b504c:	6803      	ldr	r3, [r0, #0]
   b504e:	2100      	movs	r1, #0
   b5050:	689b      	ldr	r3, [r3, #8]
   b5052:	4798      	blx	r3
    WIRE_WRITE(c);
   b5054:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5056:	6803      	ldr	r3, [r0, #0]
   b5058:	4629      	mov	r1, r5
   b505a:	689b      	ldr	r3, [r3, #8]
   b505c:	4798      	blx	r3
    wire->endTransmission();
   b505e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5064:	f001 ba0f 	b.w	b6486 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5068:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b506c:	4601      	mov	r1, r0
   b506e:	b298      	uxth	r0, r3
   b5070:	f001 fb4b 	bl	b670a <digitalWrite>
  if(spi) {
   b5074:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5076:	b120      	cbz	r0, b5082 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5078:	4629      	mov	r1, r5
}
   b507a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b507e:	f000 bee9 	b.w	b5e54 <_ZN8SPIClass8transferEh>
   b5082:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5084:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5086:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b508a:	ea05 0107 	and.w	r1, r5, r7
   b508e:	b280      	uxth	r0, r0
   b5090:	f001 fb3b 	bl	b670a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5094:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5098:	2101      	movs	r1, #1
   b509a:	b280      	uxth	r0, r0
   b509c:	f001 fb35 	bl	b670a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b50a0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b50a4:	2100      	movs	r1, #0
   b50a6:	b280      	uxth	r0, r0
   b50a8:	f001 fb2f 	bl	b670a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b50ac:	3e01      	subs	r6, #1
   b50ae:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b50b2:	d1e8      	bne.n	b5086 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b50b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b50b6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b50b6:	b538      	push	{r3, r4, r5, lr}
   b50b8:	4604      	mov	r4, r0
  TRANSACTION_START
   b50ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b50bc:	460d      	mov	r5, r1
  TRANSACTION_START
   b50be:	b180      	cbz	r0, b50e2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b50c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b50c2:	f001 f9cb 	bl	b645c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b50c6:	2d00      	cmp	r5, #0
   b50c8:	4620      	mov	r0, r4
   b50ca:	bf14      	ite	ne
   b50cc:	21a7      	movne	r1, #167	; 0xa7
   b50ce:	21a6      	moveq	r1, #166	; 0xa6
   b50d0:	f7ff ffb2 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b50d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b50d6:	b188      	cbz	r0, b50fc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b50d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b50da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b50de:	f001 b9bd 	b.w	b645c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b50e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b50e4:	b118      	cbz	r0, b50ee <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b50e6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b50ea:	f000 fe45 	bl	b5d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b50ee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b50f2:	2100      	movs	r1, #0
   b50f4:	b280      	uxth	r0, r0
   b50f6:	f001 fb08 	bl	b670a <digitalWrite>
   b50fa:	e7e4      	b.n	b50c6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b50fc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5100:	2101      	movs	r1, #1
   b5102:	b280      	uxth	r0, r0
   b5104:	f001 fb01 	bl	b670a <digitalWrite>
   b5108:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b510a:	b118      	cbz	r0, b5114 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b510c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5110:	f000 be18 	b.w	b5d44 <_ZN8SPIClass14endTransactionEv>
}
   b5114:	bd38      	pop	{r3, r4, r5, pc}

000b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5116:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b511a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b511c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b511e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5120:	188f      	adds	r7, r1, r2
   b5122:	b340      	cbz	r0, b5176 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5124:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5128:	f001 f9a6 	bl	b6478 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b512c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b512e:	6803      	ldr	r3, [r0, #0]
   b5130:	2100      	movs	r1, #0
   b5132:	689b      	ldr	r3, [r3, #8]
   b5134:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5136:	2601      	movs	r6, #1
    while(n--) {
   b5138:	42af      	cmp	r7, r5
        wire->endTransmission();
   b513a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b513c:	d017      	beq.n	b516e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b513e:	2e1f      	cmp	r6, #31
   b5140:	d90c      	bls.n	b515c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5142:	f001 f9a0 	bl	b6486 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5146:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b514a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b514c:	f001 f994 	bl	b6478 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5150:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5152:	6803      	ldr	r3, [r0, #0]
   b5154:	2100      	movs	r1, #0
   b5156:	689b      	ldr	r3, [r3, #8]
   b5158:	4798      	blx	r3
        bytesOut = 1;
   b515a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b515c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b515e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5162:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5164:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5166:	689b      	ldr	r3, [r3, #8]
   b5168:	4798      	blx	r3
      bytesOut++;
   b516a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b516c:	e7e4      	b.n	b5138 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b516e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5172:	f001 b988 	b.w	b6486 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5176:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b517a:	4601      	mov	r1, r0
   b517c:	b298      	uxth	r0, r3
   b517e:	f001 fac4 	bl	b670a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5182:	42bd      	cmp	r5, r7
   b5184:	d022      	beq.n	b51cc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5186:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5188:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b518c:	b118      	cbz	r0, b5196 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b518e:	4649      	mov	r1, r9
   b5190:	f000 fe60 	bl	b5e54 <_ZN8SPIClass8transferEh>
   b5194:	e7f5      	b.n	b5182 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5196:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5198:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b519c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b51a0:	ea09 0108 	and.w	r1, r9, r8
   b51a4:	b280      	uxth	r0, r0
   b51a6:	f001 fab0 	bl	b670a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b51aa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51ae:	2101      	movs	r1, #1
   b51b0:	b280      	uxth	r0, r0
   b51b2:	f001 faaa 	bl	b670a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b51b6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51ba:	2100      	movs	r1, #0
   b51bc:	b280      	uxth	r0, r0
   b51be:	f001 faa4 	bl	b670a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b51c2:	3e01      	subs	r6, #1
   b51c4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b51c8:	d1e8      	bne.n	b519c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b51ca:	e7da      	b.n	b5182 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b51cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b51d0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b51d0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b51d4:	1dda      	adds	r2, r3, #7
   b51d6:	bf48      	it	mi
   b51d8:	f103 020e 	addmi.w	r2, r3, #14
   b51dc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b51e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b51e2:	10d2      	asrs	r2, r2, #3
   b51e4:	435a      	muls	r2, r3
   b51e6:	2100      	movs	r1, #0
   b51e8:	f001 bb50 	b.w	b688c <memset>

000b51ec <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b51ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b51f0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b51f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b51f4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b51f8:	4604      	mov	r4, r0
   b51fa:	460f      	mov	r7, r1
   b51fc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b51fe:	b1c3      	cbz	r3, b5232 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5200:	4620      	mov	r0, r4
   b5202:	f7ff ffe5 	bl	b51d0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5206:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b520a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b520e:	2820      	cmp	r0, #32
   b5210:	dc21      	bgt.n	b5256 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5212:	2320      	movs	r3, #32
   b5214:	2201      	movs	r2, #1
   b5216:	3820      	subs	r0, #32
   b5218:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b521c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5220:	2373      	movs	r3, #115	; 0x73
   b5222:	3973      	subs	r1, #115	; 0x73
   b5224:	9300      	str	r3, [sp, #0]
   b5226:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b522a:	4b89      	ldr	r3, [pc, #548]	; (b5450 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b522c:	f340 024f 	sbfx	r2, r0, #1, #16
   b5230:	e021      	b.n	b5276 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5232:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5236:	1dd8      	adds	r0, r3, #7
   b5238:	bf48      	it	mi
   b523a:	f103 000e 	addmi.w	r0, r3, #14
   b523e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5242:	10c0      	asrs	r0, r0, #3
   b5244:	4358      	muls	r0, r3
   b5246:	f000 fcdf 	bl	b5c08 <malloc>
   b524a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b524c:	2800      	cmp	r0, #0
   b524e:	d1d7      	bne.n	b5200 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5250:	b004      	add	sp, #16
   b5252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5256:	3840      	subs	r0, #64	; 0x40
   b5258:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b525c:	fa02 f280 	sxtah	r2, r2, r0
   b5260:	2340      	movs	r3, #64	; 0x40
   b5262:	2001      	movs	r0, #1
   b5264:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5268:	2352      	movs	r3, #82	; 0x52
   b526a:	3952      	subs	r1, #82	; 0x52
   b526c:	9300      	str	r3, [sp, #0]
   b526e:	4b79      	ldr	r3, [pc, #484]	; (b5454 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5270:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5274:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5276:	4620      	mov	r0, r4
   b5278:	f341 014f 	sbfx	r1, r1, #1, #16
   b527c:	f7ff fb10 	bl	b48a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5280:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5282:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5286:	2800      	cmp	r0, #0
   b5288:	d078      	beq.n	b537c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b528a:	2d00      	cmp	r5, #0
   b528c:	d174      	bne.n	b5378 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b528e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5292:	2b20      	cmp	r3, #32
   b5294:	bf0c      	ite	eq
   b5296:	253c      	moveq	r5, #60	; 0x3c
   b5298:	253d      	movne	r5, #61	; 0x3d
   b529a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b529e:	f1b8 0f00 	cmp.w	r8, #0
   b52a2:	d001      	beq.n	b52a8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b52a4:	f001 f8de 	bl	b6464 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b52a8:	b1fe      	cbz	r6, b52ea <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b52aa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b52ae:	2800      	cmp	r0, #0
   b52b0:	db1b      	blt.n	b52ea <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b52b2:	2101      	movs	r1, #1
   b52b4:	b280      	uxth	r0, r0
   b52b6:	f001 fa17 	bl	b66e8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b52ba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b52be:	2101      	movs	r1, #1
   b52c0:	b280      	uxth	r0, r0
   b52c2:	f001 fa22 	bl	b670a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b52c6:	2001      	movs	r0, #1
   b52c8:	f000 fe8a 	bl	b5fe0 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b52cc:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b52d0:	2100      	movs	r1, #0
   b52d2:	b280      	uxth	r0, r0
   b52d4:	f001 fa19 	bl	b670a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b52d8:	200a      	movs	r0, #10
   b52da:	f000 fe81 	bl	b5fe0 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b52de:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b52e2:	2101      	movs	r1, #1
   b52e4:	b280      	uxth	r0, r0
   b52e6:	f001 fa10 	bl	b670a <digitalWrite>
  TRANSACTION_START
   b52ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b52ec:	2800      	cmp	r0, #0
   b52ee:	d074      	beq.n	b53da <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b52f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b52f2:	f001 f8b3 	bl	b645c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b52f6:	2204      	movs	r2, #4
   b52f8:	4957      	ldr	r1, [pc, #348]	; (b5458 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b52fa:	4620      	mov	r0, r4
   b52fc:	f7ff ff0b 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5300:	8961      	ldrh	r1, [r4, #10]
   b5302:	3901      	subs	r1, #1
   b5304:	b2c9      	uxtb	r1, r1
   b5306:	4620      	mov	r0, r4
   b5308:	f7ff fe96 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b530c:	4953      	ldr	r1, [pc, #332]	; (b545c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b530e:	2204      	movs	r2, #4
   b5310:	4620      	mov	r0, r4
   b5312:	f7ff ff00 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5316:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b531a:	2b01      	cmp	r3, #1
   b531c:	bf0c      	ite	eq
   b531e:	2110      	moveq	r1, #16
   b5320:	2114      	movne	r1, #20
   b5322:	4620      	mov	r0, r4
   b5324:	f7ff fe88 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5328:	2204      	movs	r2, #4
   b532a:	494d      	ldr	r1, [pc, #308]	; (b5460 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b532c:	4620      	mov	r0, r4
   b532e:	f7ff fef2 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5332:	68a3      	ldr	r3, [r4, #8]
   b5334:	4a4b      	ldr	r2, [pc, #300]	; (b5464 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5336:	4293      	cmp	r3, r2
   b5338:	d15c      	bne.n	b53f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b533a:	494b      	ldr	r1, [pc, #300]	; (b5468 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b533c:	2204      	movs	r2, #4
   b533e:	4620      	mov	r0, r4
   b5340:	f7ff fee9 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5344:	21d9      	movs	r1, #217	; 0xd9
   b5346:	4620      	mov	r0, r4
   b5348:	f7ff fe76 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b534c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5350:	2b01      	cmp	r3, #1
   b5352:	bf0c      	ite	eq
   b5354:	2122      	moveq	r1, #34	; 0x22
   b5356:	21f1      	movne	r1, #241	; 0xf1
   b5358:	4620      	mov	r0, r4
   b535a:	f7ff fe6d 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b535e:	4620      	mov	r0, r4
   b5360:	4942      	ldr	r1, [pc, #264]	; (b546c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5362:	2206      	movs	r2, #6
   b5364:	f7ff fed7 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5368:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b536a:	2800      	cmp	r0, #0
   b536c:	d063      	beq.n	b5436 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b536e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5370:	f001 f874 	bl	b645c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5374:	2001      	movs	r0, #1
   b5376:	e76b      	b.n	b5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5378:	b26d      	sxtb	r5, r5
   b537a:	e78e      	b.n	b529a <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b537c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5380:	2101      	movs	r1, #1
   b5382:	b280      	uxth	r0, r0
   b5384:	f001 f9b0 	bl	b66e8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5388:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b538c:	2101      	movs	r1, #1
   b538e:	b280      	uxth	r0, r0
   b5390:	f001 f9aa 	bl	b66e8 <pinMode>
    SSD1306_DESELECT
   b5394:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5398:	2101      	movs	r1, #1
   b539a:	b280      	uxth	r0, r0
   b539c:	f001 f9b5 	bl	b670a <digitalWrite>
    if(spi) { // Hardware SPI
   b53a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b53a2:	b13d      	cbz	r5, b53b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b53a4:	f1b8 0f00 	cmp.w	r8, #0
   b53a8:	f43f af7e 	beq.w	b52a8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b53ac:	4628      	mov	r0, r5
   b53ae:	f000 fca1 	bl	b5cf4 <_ZN8SPIClass5beginEv>
   b53b2:	e779      	b.n	b52a8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b53b4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b53b8:	2101      	movs	r1, #1
   b53ba:	b280      	uxth	r0, r0
   b53bc:	f001 f994 	bl	b66e8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b53c0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b53c4:	2101      	movs	r1, #1
   b53c6:	b280      	uxth	r0, r0
   b53c8:	f001 f98e 	bl	b66e8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b53cc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b53d0:	4629      	mov	r1, r5
   b53d2:	b280      	uxth	r0, r0
   b53d4:	f001 f999 	bl	b670a <digitalWrite>
   b53d8:	e766      	b.n	b52a8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b53da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b53dc:	b118      	cbz	r0, b53e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b53de:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b53e2:	f000 fcc9 	bl	b5d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b53e6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b53ea:	2100      	movs	r1, #0
   b53ec:	b280      	uxth	r0, r0
   b53ee:	f001 f98c 	bl	b670a <digitalWrite>
   b53f2:	e780      	b.n	b52f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b53f4:	4a1e      	ldr	r2, [pc, #120]	; (b5470 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b53f6:	4293      	cmp	r3, r2
   b53f8:	d10e      	bne.n	b5418 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b53fa:	491e      	ldr	r1, [pc, #120]	; (b5474 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b53fc:	2203      	movs	r2, #3
   b53fe:	4620      	mov	r0, r4
   b5400:	f7ff fe89 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5404:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5408:	2b01      	cmp	r3, #1
   b540a:	bf0c      	ite	eq
   b540c:	219f      	moveq	r1, #159	; 0x9f
   b540e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5410:	4620      	mov	r0, r4
   b5412:	f7ff fe11 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5416:	e795      	b.n	b5344 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5418:	4a17      	ldr	r2, [pc, #92]	; (b5478 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b541a:	4293      	cmp	r3, r2
   b541c:	d192      	bne.n	b5344 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b541e:	4917      	ldr	r1, [pc, #92]	; (b547c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5420:	2203      	movs	r2, #3
   b5422:	4620      	mov	r0, r4
   b5424:	f7ff fe77 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5428:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b542c:	2b01      	cmp	r3, #1
   b542e:	bf0c      	ite	eq
   b5430:	2110      	moveq	r1, #16
   b5432:	21af      	movne	r1, #175	; 0xaf
   b5434:	e7ec      	b.n	b5410 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5436:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b543a:	2101      	movs	r1, #1
   b543c:	b280      	uxth	r0, r0
   b543e:	f001 f964 	bl	b670a <digitalWrite>
   b5442:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5444:	2800      	cmp	r0, #0
   b5446:	d095      	beq.n	b5374 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5448:	f000 fc7c 	bl	b5d44 <_ZN8SPIClass14endTransactionEv>
   b544c:	e792      	b.n	b5374 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b544e:	bf00      	nop
   b5450:	000b7338 	.word	0x000b7338
   b5454:	000b7078 	.word	0x000b7078
   b5458:	000b7580 	.word	0x000b7580
   b545c:	000b7584 	.word	0x000b7584
   b5460:	000b7588 	.word	0x000b7588
   b5464:	00200080 	.word	0x00200080
   b5468:	000b7592 	.word	0x000b7592
   b546c:	000b758c 	.word	0x000b758c
   b5470:	00400080 	.word	0x00400080
   b5474:	000b7596 	.word	0x000b7596
   b5478:	00100060 	.word	0x00100060
   b547c:	000b7599 	.word	0x000b7599

000b5480 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5480:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5482:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5484:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5488:	db3d      	blt.n	b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b548a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b548e:	4294      	cmp	r4, r2
   b5490:	dd39      	ble.n	b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5492:	2900      	cmp	r1, #0
      w += x;
   b5494:	bfbe      	ittt	lt
   b5496:	185b      	addlt	r3, r3, r1
   b5498:	b21b      	sxthlt	r3, r3
      x  = 0;
   b549a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b549c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b54a0:	18ce      	adds	r6, r1, r3
   b54a2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b54a4:	bfc4      	itt	gt
   b54a6:	1a63      	subgt	r3, r4, r1
   b54a8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b54aa:	2b00      	cmp	r3, #0
   b54ac:	dd2b      	ble.n	b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b54ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b54b0:	10d6      	asrs	r6, r2, #3
   b54b2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b54b6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b54b8:	f002 0007 	and.w	r0, r2, #7
   b54bc:	2201      	movs	r2, #1
   b54be:	4082      	lsls	r2, r0
      switch(color) {
   b54c0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b54c2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b54c4:	d016      	beq.n	b54f4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b54c6:	2d02      	cmp	r5, #2
   b54c8:	d00b      	beq.n	b54e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b54ca:	b9e5      	cbnz	r5, b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b54cc:	43d2      	mvns	r2, r2
   b54ce:	b2d2      	uxtb	r2, r2
   b54d0:	440b      	add	r3, r1
   b54d2:	4299      	cmp	r1, r3
   b54d4:	d017      	beq.n	b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b54d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b54da:	4010      	ands	r0, r2
   b54dc:	f801 0c01 	strb.w	r0, [r1, #-1]
   b54e0:	e7f7      	b.n	b54d2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b54e2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b54e4:	4299      	cmp	r1, r3
   b54e6:	d00e      	beq.n	b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b54e8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b54ec:	4050      	eors	r0, r2
   b54ee:	f801 0c01 	strb.w	r0, [r1, #-1]
   b54f2:	e7f7      	b.n	b54e4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b54f4:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b54f6:	4299      	cmp	r1, r3
   b54f8:	d005      	beq.n	b5506 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b54fa:	f811 0b01 	ldrb.w	r0, [r1], #1
   b54fe:	4310      	orrs	r0, r2
   b5500:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5504:	e7f7      	b.n	b54f6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5506:	bd70      	pop	{r4, r5, r6, pc}

000b5508 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5508:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b550a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b550c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5510:	db76      	blt.n	b5600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5512:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5516:	42b1      	cmp	r1, r6
   b5518:	da72      	bge.n	b5600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b551a:	2a00      	cmp	r2, #0
      __h += __y;
   b551c:	bfbe      	ittt	lt
   b551e:	189b      	addlt	r3, r3, r2
   b5520:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5522:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5524:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5528:	18d7      	adds	r7, r2, r3
   b552a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b552c:	bfc4      	itt	gt
   b552e:	1aa3      	subgt	r3, r4, r2
   b5530:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5532:	2b00      	cmp	r3, #0
   b5534:	dd64      	ble.n	b5600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5536:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b553a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b553c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5540:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5544:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5546:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b554a:	d023      	beq.n	b5594 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b554c:	f1c2 0208 	rsb	r2, r2, #8
   b5550:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5552:	492d      	ldr	r1, [pc, #180]	; (b5608 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5554:	4293      	cmp	r3, r2
   b5556:	bf3c      	itt	cc
   b5558:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b555c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5560:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5562:	bf3c      	itt	cc
   b5564:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5568:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b556c:	2d01      	cmp	r5, #1
   b556e:	d007      	beq.n	b5580 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5570:	2d02      	cmp	r5, #2
   b5572:	d02e      	beq.n	b55d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5574:	b94d      	cbnz	r5, b558a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5576:	f817 c006 	ldrb.w	ip, [r7, r6]
   b557a:	ea2c 0101 	bic.w	r1, ip, r1
   b557e:	e003      	b.n	b5588 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5580:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5584:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5588:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b558a:	4293      	cmp	r3, r2
   b558c:	d338      	bcc.n	b5600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b558e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5592:	440c      	add	r4, r1
        h -= mod;
   b5594:	1a9a      	subs	r2, r3, r2
   b5596:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5598:	2a07      	cmp	r2, #7
   b559a:	d90e      	bls.n	b55ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b559c:	2d02      	cmp	r5, #2
   b559e:	d11d      	bne.n	b55dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b55a0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b55a2:	7821      	ldrb	r1, [r4, #0]
   b55a4:	43c9      	mvns	r1, r1
   b55a6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b55a8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b55aa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b55ae:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b55b0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b55b2:	440c      	add	r4, r1
            } while(h >= 8);
   b55b4:	d8f5      	bhi.n	b55a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b55b6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b55ba:	b30a      	cbz	r2, b5600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b55bc:	4b13      	ldr	r3, [pc, #76]	; (b560c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b55be:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b55c0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b55c2:	d01a      	beq.n	b55fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b55c4:	2d02      	cmp	r5, #2
   b55c6:	d01c      	beq.n	b5602 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b55c8:	b9d5      	cbnz	r5, b5600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b55ca:	7822      	ldrb	r2, [r4, #0]
   b55cc:	ea22 0303 	bic.w	r3, r2, r3
   b55d0:	e015      	b.n	b55fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b55d2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b55d6:	ea81 010c 	eor.w	r1, r1, ip
   b55da:	e7d5      	b.n	b5588 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b55dc:	1e29      	subs	r1, r5, #0
   b55de:	bf18      	it	ne
   b55e0:	2101      	movne	r1, #1
   b55e2:	4249      	negs	r1, r1
   b55e4:	b2c9      	uxtb	r1, r1
   b55e6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b55e8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b55ea:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b55ec:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b55f0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b55f2:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b55f4:	4434      	add	r4, r6
            } while(h >= 8);
   b55f6:	d8f7      	bhi.n	b55e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b55f8:	e7dd      	b.n	b55b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b55fa:	7822      	ldrb	r2, [r4, #0]
   b55fc:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b55fe:	7023      	strb	r3, [r4, #0]
}
   b5600:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5602:	7822      	ldrb	r2, [r4, #0]
   b5604:	4053      	eors	r3, r2
   b5606:	e7fa      	b.n	b55fe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5608:	000b7570 	.word	0x000b7570
   b560c:	000b7578 	.word	0x000b7578

000b5610 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5610:	b470      	push	{r4, r5, r6}
   b5612:	4614      	mov	r4, r2
  switch(rotation) {
   b5614:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5616:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b561a:	2a02      	cmp	r2, #2
   b561c:	d00d      	beq.n	b563a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b561e:	2a03      	cmp	r2, #3
   b5620:	d018      	beq.n	b5654 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5622:	2a01      	cmp	r2, #1
   b5624:	d111      	bne.n	b564a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5626:	8902      	ldrh	r2, [r0, #8]
   b5628:	43e4      	mvns	r4, r4
   b562a:	4414      	add	r4, r2
   b562c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b562e:	9603      	str	r6, [sp, #12]
   b5630:	460a      	mov	r2, r1
   b5632:	4621      	mov	r1, r4
}
   b5634:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5636:	f7ff bf67 	b.w	b5508 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b563a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b563c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b563e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5640:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5642:	4414      	add	r4, r2
    x -= (w-1);
   b5644:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5646:	b224      	sxth	r4, r4
    x -= (w-1);
   b5648:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b564a:	9603      	str	r6, [sp, #12]
   b564c:	4622      	mov	r2, r4
}
   b564e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5650:	f7ff bf16 	b.w	b5480 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5654:	8945      	ldrh	r5, [r0, #10]
   b5656:	4419      	add	r1, r3
   b5658:	1a69      	subs	r1, r5, r1
   b565a:	b209      	sxth	r1, r1
    break;
   b565c:	e7e7      	b.n	b562e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b565e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b565e:	b430      	push	{r4, r5}
   b5660:	4614      	mov	r4, r2
  switch(rotation) {
   b5662:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5664:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5668:	2a02      	cmp	r2, #2
   b566a:	d00d      	beq.n	b5688 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b566c:	2a03      	cmp	r2, #3
   b566e:	d018      	beq.n	b56a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5670:	2a01      	cmp	r2, #1
   b5672:	d111      	bne.n	b5698 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5674:	18e2      	adds	r2, r4, r3
   b5676:	8904      	ldrh	r4, [r0, #8]
   b5678:	1aa4      	subs	r4, r4, r2
   b567a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b567c:	9502      	str	r5, [sp, #8]
   b567e:	460a      	mov	r2, r1
   b5680:	4621      	mov	r1, r4
}
   b5682:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5684:	f7ff befc 	b.w	b5480 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5688:	8902      	ldrh	r2, [r0, #8]
   b568a:	43c9      	mvns	r1, r1
   b568c:	4411      	add	r1, r2
    y -= (h-1);
   b568e:	18e2      	adds	r2, r4, r3
   b5690:	8944      	ldrh	r4, [r0, #10]
   b5692:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5694:	b209      	sxth	r1, r1
    y -= (h-1);
   b5696:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5698:	9502      	str	r5, [sp, #8]
   b569a:	4622      	mov	r2, r4
}
   b569c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b569e:	f7ff bf33 	b.w	b5508 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b56a2:	8942      	ldrh	r2, [r0, #10]
   b56a4:	43c9      	mvns	r1, r1
   b56a6:	4411      	add	r1, r2
   b56a8:	b209      	sxth	r1, r1
    break;
   b56aa:	e7e7      	b.n	b567c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b56ac <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b56ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b56b0:	4604      	mov	r4, r0
  TRANSACTION_START
   b56b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b56b4:	2800      	cmp	r0, #0
   b56b6:	d042      	beq.n	b573e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b56b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b56ba:	f000 fecf 	bl	b645c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b56be:	4947      	ldr	r1, [pc, #284]	; (b57dc <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b56c0:	2205      	movs	r2, #5
   b56c2:	4620      	mov	r0, r4
   b56c4:	f7ff fd27 	bl	b5116 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b56c8:	8921      	ldrh	r1, [r4, #8]
   b56ca:	3901      	subs	r1, #1
   b56cc:	4620      	mov	r0, r4
   b56ce:	b2c9      	uxtb	r1, r1
   b56d0:	f7ff fcb2 	bl	b5038 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b56d4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b56d8:	1dde      	adds	r6, r3, #7
   b56da:	bf48      	it	mi
   b56dc:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b56e0:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b56e4:	8923      	ldrh	r3, [r4, #8]
   b56e6:	10f6      	asrs	r6, r6, #3
   b56e8:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b56ec:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b56f0:	2800      	cmp	r0, #0
   b56f2:	d03a      	beq.n	b576a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b56f4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b56f8:	f000 febe 	bl	b6478 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b56fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b56fe:	6803      	ldr	r3, [r0, #0]
   b5700:	2140      	movs	r1, #64	; 0x40
   b5702:	689b      	ldr	r3, [r3, #8]
   b5704:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5706:	2701      	movs	r7, #1
    while(count--) {
   b5708:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b570a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b570c:	d024      	beq.n	b5758 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b570e:	2f1f      	cmp	r7, #31
   b5710:	d90c      	bls.n	b572c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5712:	f000 feb8 	bl	b6486 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5716:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b571a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b571c:	f000 feac 	bl	b6478 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5720:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5722:	6803      	ldr	r3, [r0, #0]
   b5724:	2140      	movs	r1, #64	; 0x40
   b5726:	689b      	ldr	r3, [r3, #8]
   b5728:	4798      	blx	r3
        bytesOut = 1;
   b572a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b572c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b572e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5732:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5734:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5736:	689b      	ldr	r3, [r3, #8]
   b5738:	4798      	blx	r3
      bytesOut++;
   b573a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b573c:	e7e4      	b.n	b5708 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b573e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5740:	b118      	cbz	r0, b574a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5742:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5746:	f000 fb17 	bl	b5d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b574a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b574e:	2100      	movs	r1, #0
   b5750:	b280      	uxth	r0, r0
   b5752:	f000 ffda 	bl	b670a <digitalWrite>
   b5756:	e7b2      	b.n	b56be <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5758:	f000 fe95 	bl	b6486 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b575c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b575e:	b378      	cbz	r0, b57c0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5760:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5762:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5766:	f000 be79 	b.w	b645c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b576a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b576e:	2101      	movs	r1, #1
   b5770:	b280      	uxth	r0, r0
   b5772:	f000 ffca 	bl	b670a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5776:	42ae      	cmp	r6, r5
   b5778:	d0f0      	beq.n	b575c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b577a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b577c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5780:	b118      	cbz	r0, b578a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5782:	4649      	mov	r1, r9
   b5784:	f000 fb66 	bl	b5e54 <_ZN8SPIClass8transferEh>
   b5788:	e7f5      	b.n	b5776 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b578a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b578c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5790:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5794:	ea09 0108 	and.w	r1, r9, r8
   b5798:	b280      	uxth	r0, r0
   b579a:	f000 ffb6 	bl	b670a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b579e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b57a2:	2101      	movs	r1, #1
   b57a4:	b280      	uxth	r0, r0
   b57a6:	f000 ffb0 	bl	b670a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b57aa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b57ae:	2100      	movs	r1, #0
   b57b0:	b280      	uxth	r0, r0
   b57b2:	f000 ffaa 	bl	b670a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b57b6:	3f01      	subs	r7, #1
   b57b8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b57bc:	d1e8      	bne.n	b5790 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b57be:	e7da      	b.n	b5776 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b57c0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b57c4:	2101      	movs	r1, #1
   b57c6:	b280      	uxth	r0, r0
   b57c8:	f000 ff9f 	bl	b670a <digitalWrite>
   b57cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b57ce:	b118      	cbz	r0, b57d8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b57d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b57d4:	f000 bab6 	b.w	b5d44 <_ZN8SPIClass14endTransactionEv>
}
   b57d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b57dc:	000b759c 	.word	0x000b759c

000b57e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b57e0:	b508      	push	{r3, lr}
   b57e2:	4b02      	ldr	r3, [pc, #8]	; (b57ec <netdb_freeaddrinfo+0xc>)
   b57e4:	681b      	ldr	r3, [r3, #0]
   b57e6:	689b      	ldr	r3, [r3, #8]
   b57e8:	9301      	str	r3, [sp, #4]
   b57ea:	bd08      	pop	{r3, pc}
   b57ec:	00030268 	.word	0x00030268

000b57f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b57f0:	b508      	push	{r3, lr}
   b57f2:	4b02      	ldr	r3, [pc, #8]	; (b57fc <netdb_getaddrinfo+0xc>)
   b57f4:	681b      	ldr	r3, [r3, #0]
   b57f6:	68db      	ldr	r3, [r3, #12]
   b57f8:	9301      	str	r3, [sp, #4]
   b57fa:	bd08      	pop	{r3, pc}
   b57fc:	00030268 	.word	0x00030268

000b5800 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5800:	b508      	push	{r3, lr}
   b5802:	4b02      	ldr	r3, [pc, #8]	; (b580c <hal_gpio_mode+0xc>)
   b5804:	681b      	ldr	r3, [r3, #0]
   b5806:	689b      	ldr	r3, [r3, #8]
   b5808:	9301      	str	r3, [sp, #4]
   b580a:	bd08      	pop	{r3, pc}
   b580c:	0003022c 	.word	0x0003022c

000b5810 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5810:	b508      	push	{r3, lr}
   b5812:	4b02      	ldr	r3, [pc, #8]	; (b581c <hal_gpio_get_mode+0xc>)
   b5814:	681b      	ldr	r3, [r3, #0]
   b5816:	68db      	ldr	r3, [r3, #12]
   b5818:	9301      	str	r3, [sp, #4]
   b581a:	bd08      	pop	{r3, pc}
   b581c:	0003022c 	.word	0x0003022c

000b5820 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5820:	b508      	push	{r3, lr}
   b5822:	4b02      	ldr	r3, [pc, #8]	; (b582c <hal_gpio_write+0xc>)
   b5824:	681b      	ldr	r3, [r3, #0]
   b5826:	691b      	ldr	r3, [r3, #16]
   b5828:	9301      	str	r3, [sp, #4]
   b582a:	bd08      	pop	{r3, pc}
   b582c:	0003022c 	.word	0x0003022c

000b5830 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5830:	b508      	push	{r3, lr}
   b5832:	4b02      	ldr	r3, [pc, #8]	; (b583c <hal_gpio_read+0xc>)
   b5834:	681b      	ldr	r3, [r3, #0]
   b5836:	695b      	ldr	r3, [r3, #20]
   b5838:	9301      	str	r3, [sp, #4]
   b583a:	bd08      	pop	{r3, pc}
   b583c:	0003022c 	.word	0x0003022c

000b5840 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5840:	b508      	push	{r3, lr}
   b5842:	4b02      	ldr	r3, [pc, #8]	; (b584c <HAL_RNG_GetRandomNumber+0xc>)
   b5844:	681b      	ldr	r3, [r3, #0]
   b5846:	685b      	ldr	r3, [r3, #4]
   b5848:	9301      	str	r3, [sp, #4]
   b584a:	bd08      	pop	{r3, pc}
   b584c:	00030218 	.word	0x00030218

000b5850 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5850:	b508      	push	{r3, lr}
   b5852:	4b02      	ldr	r3, [pc, #8]	; (b585c <HAL_Delay_Microseconds+0xc>)
   b5854:	681b      	ldr	r3, [r3, #0]
   b5856:	68db      	ldr	r3, [r3, #12]
   b5858:	9301      	str	r3, [sp, #4]
   b585a:	bd08      	pop	{r3, pc}
   b585c:	00030218 	.word	0x00030218

000b5860 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5860:	b508      	push	{r3, lr}
   b5862:	4b02      	ldr	r3, [pc, #8]	; (b586c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5864:	681b      	ldr	r3, [r3, #0]
   b5866:	695b      	ldr	r3, [r3, #20]
   b5868:	9301      	str	r3, [sp, #4]
   b586a:	bd08      	pop	{r3, pc}
   b586c:	00030218 	.word	0x00030218

000b5870 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5870:	b508      	push	{r3, lr}
   b5872:	4b02      	ldr	r3, [pc, #8]	; (b587c <os_mutex_create+0xc>)
   b5874:	681b      	ldr	r3, [r3, #0]
   b5876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5878:	9301      	str	r3, [sp, #4]
   b587a:	bd08      	pop	{r3, pc}
   b587c:	00030248 	.word	0x00030248

000b5880 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5880:	b508      	push	{r3, lr}
   b5882:	4b02      	ldr	r3, [pc, #8]	; (b588c <os_mutex_destroy+0xc>)
   b5884:	681b      	ldr	r3, [r3, #0]
   b5886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5888:	9301      	str	r3, [sp, #4]
   b588a:	bd08      	pop	{r3, pc}
   b588c:	00030248 	.word	0x00030248

000b5890 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5890:	b508      	push	{r3, lr}
   b5892:	4b02      	ldr	r3, [pc, #8]	; (b589c <os_mutex_recursive_create+0xc>)
   b5894:	681b      	ldr	r3, [r3, #0]
   b5896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5898:	9301      	str	r3, [sp, #4]
   b589a:	bd08      	pop	{r3, pc}
   b589c:	00030248 	.word	0x00030248

000b58a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b58a0:	b508      	push	{r3, lr}
   b58a2:	4b02      	ldr	r3, [pc, #8]	; (b58ac <inet_inet_ntop+0xc>)
   b58a4:	681b      	ldr	r3, [r3, #0]
   b58a6:	695b      	ldr	r3, [r3, #20]
   b58a8:	9301      	str	r3, [sp, #4]
   b58aa:	bd08      	pop	{r3, pc}
   b58ac:	00030264 	.word	0x00030264

000b58b0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b58b0:	b508      	push	{r3, lr}
   b58b2:	4b02      	ldr	r3, [pc, #8]	; (b58bc <hal_usart_write+0xc>)
   b58b4:	681b      	ldr	r3, [r3, #0]
   b58b6:	68db      	ldr	r3, [r3, #12]
   b58b8:	9301      	str	r3, [sp, #4]
   b58ba:	bd08      	pop	{r3, pc}
   b58bc:	0003023c 	.word	0x0003023c

000b58c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b58c0:	b508      	push	{r3, lr}
   b58c2:	4b02      	ldr	r3, [pc, #8]	; (b58cc <hal_usart_available+0xc>)
   b58c4:	681b      	ldr	r3, [r3, #0]
   b58c6:	691b      	ldr	r3, [r3, #16]
   b58c8:	9301      	str	r3, [sp, #4]
   b58ca:	bd08      	pop	{r3, pc}
   b58cc:	0003023c 	.word	0x0003023c

000b58d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b58d0:	b508      	push	{r3, lr}
   b58d2:	4b02      	ldr	r3, [pc, #8]	; (b58dc <hal_usart_read+0xc>)
   b58d4:	681b      	ldr	r3, [r3, #0]
   b58d6:	695b      	ldr	r3, [r3, #20]
   b58d8:	9301      	str	r3, [sp, #4]
   b58da:	bd08      	pop	{r3, pc}
   b58dc:	0003023c 	.word	0x0003023c

000b58e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b58e0:	b508      	push	{r3, lr}
   b58e2:	4b02      	ldr	r3, [pc, #8]	; (b58ec <hal_usart_peek+0xc>)
   b58e4:	681b      	ldr	r3, [r3, #0]
   b58e6:	699b      	ldr	r3, [r3, #24]
   b58e8:	9301      	str	r3, [sp, #4]
   b58ea:	bd08      	pop	{r3, pc}
   b58ec:	0003023c 	.word	0x0003023c

000b58f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b58f0:	b508      	push	{r3, lr}
   b58f2:	4b02      	ldr	r3, [pc, #8]	; (b58fc <hal_usart_flush+0xc>)
   b58f4:	681b      	ldr	r3, [r3, #0]
   b58f6:	69db      	ldr	r3, [r3, #28]
   b58f8:	9301      	str	r3, [sp, #4]
   b58fa:	bd08      	pop	{r3, pc}
   b58fc:	0003023c 	.word	0x0003023c

000b5900 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5900:	b508      	push	{r3, lr}
   b5902:	4b02      	ldr	r3, [pc, #8]	; (b590c <hal_usart_is_enabled+0xc>)
   b5904:	681b      	ldr	r3, [r3, #0]
   b5906:	6a1b      	ldr	r3, [r3, #32]
   b5908:	9301      	str	r3, [sp, #4]
   b590a:	bd08      	pop	{r3, pc}
   b590c:	0003023c 	.word	0x0003023c

000b5910 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5910:	b508      	push	{r3, lr}
   b5912:	4b02      	ldr	r3, [pc, #8]	; (b591c <hal_usart_available_data_for_write+0xc>)
   b5914:	681b      	ldr	r3, [r3, #0]
   b5916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5918:	9301      	str	r3, [sp, #4]
   b591a:	bd08      	pop	{r3, pc}
   b591c:	0003023c 	.word	0x0003023c

000b5920 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5920:	b508      	push	{r3, lr}
   b5922:	4b02      	ldr	r3, [pc, #8]	; (b592c <hal_usart_init_ex+0xc>)
   b5924:	681b      	ldr	r3, [r3, #0]
   b5926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5928:	9301      	str	r3, [sp, #4]
   b592a:	bd08      	pop	{r3, pc}
   b592c:	0003023c 	.word	0x0003023c

000b5930 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5930:	b508      	push	{r3, lr}
   b5932:	4b02      	ldr	r3, [pc, #8]	; (b593c <hal_i2c_set_speed+0xc>)
   b5934:	681b      	ldr	r3, [r3, #0]
   b5936:	681b      	ldr	r3, [r3, #0]
   b5938:	9301      	str	r3, [sp, #4]
   b593a:	bd08      	pop	{r3, pc}
   b593c:	00030228 	.word	0x00030228

000b5940 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5940:	b508      	push	{r3, lr}
   b5942:	4b02      	ldr	r3, [pc, #8]	; (b594c <hal_i2c_begin+0xc>)
   b5944:	681b      	ldr	r3, [r3, #0]
   b5946:	68db      	ldr	r3, [r3, #12]
   b5948:	9301      	str	r3, [sp, #4]
   b594a:	bd08      	pop	{r3, pc}
   b594c:	00030228 	.word	0x00030228

000b5950 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5950:	b508      	push	{r3, lr}
   b5952:	4b02      	ldr	r3, [pc, #8]	; (b595c <hal_i2c_begin_transmission+0xc>)
   b5954:	681b      	ldr	r3, [r3, #0]
   b5956:	699b      	ldr	r3, [r3, #24]
   b5958:	9301      	str	r3, [sp, #4]
   b595a:	bd08      	pop	{r3, pc}
   b595c:	00030228 	.word	0x00030228

000b5960 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5960:	b508      	push	{r3, lr}
   b5962:	4b02      	ldr	r3, [pc, #8]	; (b596c <hal_i2c_end_transmission+0xc>)
   b5964:	681b      	ldr	r3, [r3, #0]
   b5966:	69db      	ldr	r3, [r3, #28]
   b5968:	9301      	str	r3, [sp, #4]
   b596a:	bd08      	pop	{r3, pc}
   b596c:	00030228 	.word	0x00030228

000b5970 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5970:	b508      	push	{r3, lr}
   b5972:	4b02      	ldr	r3, [pc, #8]	; (b597c <hal_i2c_write+0xc>)
   b5974:	681b      	ldr	r3, [r3, #0]
   b5976:	6a1b      	ldr	r3, [r3, #32]
   b5978:	9301      	str	r3, [sp, #4]
   b597a:	bd08      	pop	{r3, pc}
   b597c:	00030228 	.word	0x00030228

000b5980 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5980:	b508      	push	{r3, lr}
   b5982:	4b02      	ldr	r3, [pc, #8]	; (b598c <hal_i2c_available+0xc>)
   b5984:	681b      	ldr	r3, [r3, #0]
   b5986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5988:	9301      	str	r3, [sp, #4]
   b598a:	bd08      	pop	{r3, pc}
   b598c:	00030228 	.word	0x00030228

000b5990 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5990:	b508      	push	{r3, lr}
   b5992:	4b02      	ldr	r3, [pc, #8]	; (b599c <hal_i2c_read+0xc>)
   b5994:	681b      	ldr	r3, [r3, #0]
   b5996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	bd08      	pop	{r3, pc}
   b599c:	00030228 	.word	0x00030228

000b59a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b59a0:	b508      	push	{r3, lr}
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <hal_i2c_peek+0xc>)
   b59a4:	681b      	ldr	r3, [r3, #0]
   b59a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59a8:	9301      	str	r3, [sp, #4]
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	00030228 	.word	0x00030228

000b59b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b59b0:	b508      	push	{r3, lr}
   b59b2:	4b02      	ldr	r3, [pc, #8]	; (b59bc <hal_i2c_flush+0xc>)
   b59b4:	681b      	ldr	r3, [r3, #0]
   b59b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b59b8:	9301      	str	r3, [sp, #4]
   b59ba:	bd08      	pop	{r3, pc}
   b59bc:	00030228 	.word	0x00030228

000b59c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b59c0:	b508      	push	{r3, lr}
   b59c2:	4b02      	ldr	r3, [pc, #8]	; (b59cc <hal_i2c_is_enabled+0xc>)
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	bd08      	pop	{r3, pc}
   b59cc:	00030228 	.word	0x00030228

000b59d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b59d0:	b508      	push	{r3, lr}
   b59d2:	4b02      	ldr	r3, [pc, #8]	; (b59dc <hal_i2c_init+0xc>)
   b59d4:	681b      	ldr	r3, [r3, #0]
   b59d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b59d8:	9301      	str	r3, [sp, #4]
   b59da:	bd08      	pop	{r3, pc}
   b59dc:	00030228 	.word	0x00030228

000b59e0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b02      	ldr	r3, [pc, #8]	; (b59ec <hal_spi_begin+0xc>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	681b      	ldr	r3, [r3, #0]
   b59e8:	9301      	str	r3, [sp, #4]
   b59ea:	bd08      	pop	{r3, pc}
   b59ec:	00030230 	.word	0x00030230

000b59f0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b59f0:	b508      	push	{r3, lr}
   b59f2:	4b02      	ldr	r3, [pc, #8]	; (b59fc <hal_spi_transfer+0xc>)
   b59f4:	681b      	ldr	r3, [r3, #0]
   b59f6:	695b      	ldr	r3, [r3, #20]
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	bd08      	pop	{r3, pc}
   b59fc:	00030230 	.word	0x00030230

000b5a00 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5a00:	b508      	push	{r3, lr}
   b5a02:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <hal_spi_init+0xc>)
   b5a04:	681b      	ldr	r3, [r3, #0]
   b5a06:	69db      	ldr	r3, [r3, #28]
   b5a08:	9301      	str	r3, [sp, #4]
   b5a0a:	bd08      	pop	{r3, pc}
   b5a0c:	00030230 	.word	0x00030230

000b5a10 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5a10:	b508      	push	{r3, lr}
   b5a12:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <hal_spi_is_enabled+0xc>)
   b5a14:	681b      	ldr	r3, [r3, #0]
   b5a16:	6a1b      	ldr	r3, [r3, #32]
   b5a18:	9301      	str	r3, [sp, #4]
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	00030230 	.word	0x00030230

000b5a20 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b02      	ldr	r3, [pc, #8]	; (b5a2c <hal_spi_info+0xc>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	bd08      	pop	{r3, pc}
   b5a2c:	00030230 	.word	0x00030230

000b5a30 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b02      	ldr	r3, [pc, #8]	; (b5a3c <hal_spi_set_settings+0xc>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5a38:	9301      	str	r3, [sp, #4]
   b5a3a:	bd08      	pop	{r3, pc}
   b5a3c:	00030230 	.word	0x00030230

000b5a40 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5a40:	b508      	push	{r3, lr}
   b5a42:	4b02      	ldr	r3, [pc, #8]	; (b5a4c <hal_spi_acquire+0xc>)
   b5a44:	681b      	ldr	r3, [r3, #0]
   b5a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a48:	9301      	str	r3, [sp, #4]
   b5a4a:	bd08      	pop	{r3, pc}
   b5a4c:	00030230 	.word	0x00030230

000b5a50 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5a50:	b508      	push	{r3, lr}
   b5a52:	4b02      	ldr	r3, [pc, #8]	; (b5a5c <hal_spi_release+0xc>)
   b5a54:	681b      	ldr	r3, [r3, #0]
   b5a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a58:	9301      	str	r3, [sp, #4]
   b5a5a:	bd08      	pop	{r3, pc}
   b5a5c:	00030230 	.word	0x00030230

000b5a60 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <HAL_USB_USART_Init+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	681b      	ldr	r3, [r3, #0]
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	0003024c 	.word	0x0003024c

000b5a70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <HAL_USB_USART_Begin+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	685b      	ldr	r3, [r3, #4]
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	0003024c 	.word	0x0003024c

000b5a80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <HAL_USB_USART_Available_Data+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	691b      	ldr	r3, [r3, #16]
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	0003024c 	.word	0x0003024c

000b5a90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	695b      	ldr	r3, [r3, #20]
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	0003024c 	.word	0x0003024c

000b5aa0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <HAL_USB_USART_Receive_Data+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	699b      	ldr	r3, [r3, #24]
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	0003024c 	.word	0x0003024c

000b5ab0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <HAL_USB_USART_Send_Data+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	69db      	ldr	r3, [r3, #28]
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	0003024c 	.word	0x0003024c

000b5ac0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <HAL_USB_USART_Flush_Data+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	6a1b      	ldr	r3, [r3, #32]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	0003024c 	.word	0x0003024c

000b5ad0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <panic_+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030260 	.word	0x00030260

000b5ae0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <set_system_mode+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	685b      	ldr	r3, [r3, #4]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030220 	.word	0x00030220

000b5af0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <system_delay_ms+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	695b      	ldr	r3, [r3, #20]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030220 	.word	0x00030220

000b5b00 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <system_thread_set_state+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030220 	.word	0x00030220

000b5b10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b03      	ldr	r3, [pc, #12]	; (b5b20 <system_ctrl_set_app_request_handler+0x10>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5b1a:	9301      	str	r3, [sp, #4]
   b5b1c:	bd08      	pop	{r3, pc}
   b5b1e:	0000      	.short	0x0000
   b5b20:	00030220 	.word	0x00030220

000b5b24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5b24:	b508      	push	{r3, lr}
   b5b26:	4b03      	ldr	r3, [pc, #12]	; (b5b34 <system_ctrl_set_result+0x10>)
   b5b28:	681b      	ldr	r3, [r3, #0]
   b5b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5b2e:	9301      	str	r3, [sp, #4]
   b5b30:	bd08      	pop	{r3, pc}
   b5b32:	0000      	.short	0x0000
   b5b34:	00030220 	.word	0x00030220

000b5b38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <network_connect+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	685b      	ldr	r3, [r3, #4]
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	00030240 	.word	0x00030240

000b5b48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <network_connecting+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	689b      	ldr	r3, [r3, #8]
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	00030240 	.word	0x00030240

000b5b58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <network_disconnect+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	68db      	ldr	r3, [r3, #12]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	00030240 	.word	0x00030240

000b5b68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <network_ready+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	691b      	ldr	r3, [r3, #16]
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	00030240 	.word	0x00030240

000b5b78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <network_on+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	695b      	ldr	r3, [r3, #20]
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	00030240 	.word	0x00030240

000b5b88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <network_off+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	699b      	ldr	r3, [r3, #24]
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	00030240 	.word	0x00030240

000b5b98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <network_listen+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	69db      	ldr	r3, [r3, #28]
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	00030240 	.word	0x00030240

000b5ba8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <network_listening+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	6a1b      	ldr	r3, [r3, #32]
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	00030240 	.word	0x00030240

000b5bb8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <network_set_listen_timeout+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	00030240 	.word	0x00030240

000b5bc8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <network_get_listen_timeout+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	00030240 	.word	0x00030240

000b5bd8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <network_is_on+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	00030240 	.word	0x00030240

000b5be8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <network_is_off+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	00030240 	.word	0x00030240

000b5bf8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	00030244 	.word	0x00030244

000b5c08 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <malloc+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	681b      	ldr	r3, [r3, #0]
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	0003021c 	.word	0x0003021c

000b5c18 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <free+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	685b      	ldr	r3, [r3, #4]
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	0003021c 	.word	0x0003021c

000b5c28 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b02      	ldr	r3, [pc, #8]	; (b5c34 <vsnprintf+0xc>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c30:	9301      	str	r3, [sp, #4]
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	0003021c 	.word	0x0003021c

000b5c38 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <__assert_func+0xc>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	bd08      	pop	{r3, pc}
   b5c44:	0003021c 	.word	0x0003021c

000b5c48 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5c48:	b508      	push	{r3, lr}
   b5c4a:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <newlib_impure_ptr_callback+0xc>)
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c50:	9301      	str	r3, [sp, #4]
   b5c52:	bd08      	pop	{r3, pc}
   b5c54:	0003021c 	.word	0x0003021c

000b5c58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5c58:	2200      	movs	r2, #0
   b5c5a:	6840      	ldr	r0, [r0, #4]
   b5c5c:	4611      	mov	r1, r2
   b5c5e:	f7ff bfa3 	b.w	b5ba8 <network_listening>

000b5c62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5c62:	2200      	movs	r2, #0
   b5c64:	6840      	ldr	r0, [r0, #4]
   b5c66:	4611      	mov	r1, r2
   b5c68:	f7ff bfae 	b.w	b5bc8 <network_get_listen_timeout>

000b5c6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5c6c:	6840      	ldr	r0, [r0, #4]
   b5c6e:	2200      	movs	r2, #0
   b5c70:	f7ff bfa2 	b.w	b5bb8 <network_set_listen_timeout>

000b5c74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5c74:	6840      	ldr	r0, [r0, #4]
   b5c76:	2200      	movs	r2, #0
   b5c78:	f081 0101 	eor.w	r1, r1, #1
   b5c7c:	f7ff bf8c 	b.w	b5b98 <network_listen>

000b5c80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5c80:	2300      	movs	r3, #0
   b5c82:	6840      	ldr	r0, [r0, #4]
   b5c84:	461a      	mov	r2, r3
   b5c86:	4619      	mov	r1, r3
   b5c88:	f7ff bf7e 	b.w	b5b88 <network_off>

000b5c8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5c8c:	2300      	movs	r3, #0
   b5c8e:	6840      	ldr	r0, [r0, #4]
   b5c90:	461a      	mov	r2, r3
   b5c92:	4619      	mov	r1, r3
   b5c94:	f7ff bf70 	b.w	b5b78 <network_on>

000b5c98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5c98:	2200      	movs	r2, #0
   b5c9a:	6840      	ldr	r0, [r0, #4]
   b5c9c:	4611      	mov	r1, r2
   b5c9e:	f7ff bf63 	b.w	b5b68 <network_ready>

000b5ca2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5ca2:	2200      	movs	r2, #0
   b5ca4:	6840      	ldr	r0, [r0, #4]
   b5ca6:	4611      	mov	r1, r2
   b5ca8:	f7ff bf4e 	b.w	b5b48 <network_connecting>

000b5cac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5cac:	6840      	ldr	r0, [r0, #4]
   b5cae:	2200      	movs	r2, #0
   b5cb0:	2102      	movs	r1, #2
   b5cb2:	f7ff bf51 	b.w	b5b58 <network_disconnect>

000b5cb6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5cb6:	2300      	movs	r3, #0
   b5cb8:	6840      	ldr	r0, [r0, #4]
   b5cba:	461a      	mov	r2, r3
   b5cbc:	f7ff bf3c 	b.w	b5b38 <network_connect>

000b5cc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5cc0:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5cc2:	2203      	movs	r2, #3
   b5cc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5cc6:	4a02      	ldr	r2, [pc, #8]	; (b5cd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5cc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5cca:	4770      	bx	lr
   b5ccc:	2003e6c4 	.word	0x2003e6c4
   b5cd0:	000b75ac 	.word	0x000b75ac

000b5cd4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5cd4:	2100      	movs	r1, #0
   b5cd6:	f7ff bebb 	b.w	b5a50 <hal_spi_release>

000b5cda <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5cda:	2100      	movs	r1, #0
   b5cdc:	f7ff beb0 	b.w	b5a40 <hal_spi_acquire>

000b5ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5ce0:	b510      	push	{r4, lr}
   b5ce2:	4604      	mov	r4, r0
   b5ce4:	4608      	mov	r0, r1
{
    _spi = spi;
   b5ce6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5ce8:	f7ff fe8a 	bl	b5a00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5cec:	2300      	movs	r3, #0
   b5cee:	6063      	str	r3, [r4, #4]
}
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	bd10      	pop	{r4, pc}

000b5cf4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5cf4:	b513      	push	{r0, r1, r4, lr}
   b5cf6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5cf8:	7800      	ldrb	r0, [r0, #0]
   b5cfa:	f7ff ffee 	bl	b5cda <_ZN8SPIClass4lockEv.isra.0>
   b5cfe:	b958      	cbnz	r0, b5d18 <_ZN8SPIClass5beginEv+0x24>
   b5d00:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5d02:	9001      	str	r0, [sp, #4]
   b5d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5d08:	f7ff fe6a 	bl	b59e0 <hal_spi_begin>
        unlock();
   b5d0c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d0e:	b002      	add	sp, #8
   b5d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d14:	f7ff bfde 	b.w	b5cd4 <_ZN8SPIClass6unlockEv.isra.0>
   b5d18:	b002      	add	sp, #8
   b5d1a:	bd10      	pop	{r4, pc}

000b5d1c <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
   b5d1c:	b513      	push	{r0, r1, r4, lr}
   b5d1e:	4604      	mov	r4, r0
    if (!lock())
   b5d20:	7800      	ldrb	r0, [r0, #0]
{
   b5d22:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5d24:	f7ff ffd9 	bl	b5cda <_ZN8SPIClass4lockEv.isra.0>
   b5d28:	9901      	ldr	r1, [sp, #4]
   b5d2a:	b948      	cbnz	r0, b5d40 <_ZN8SPIClass5beginEt+0x24>
   b5d2c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   b5d2e:	9001      	str	r0, [sp, #4]
   b5d30:	f7ff fe56 	bl	b59e0 <hal_spi_begin>
        unlock();
   b5d34:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d36:	b002      	add	sp, #8
   b5d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d3c:	f7ff bfca 	b.w	b5cd4 <_ZN8SPIClass6unlockEv.isra.0>
   b5d40:	b002      	add	sp, #8
   b5d42:	bd10      	pop	{r4, pc}

000b5d44 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5d44:	7800      	ldrb	r0, [r0, #0]
   b5d46:	f7ff bfc5 	b.w	b5cd4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5d4c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5d4c:	0840      	lsrs	r0, r0, #1
{
   b5d4e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5d50:	6018      	str	r0, [r3, #0]
   b5d52:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5d54:	6818      	ldr	r0, [r3, #0]
   b5d56:	4288      	cmp	r0, r1
   b5d58:	b2e5      	uxtb	r5, r4
   b5d5a:	d906      	bls.n	b5d6a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5d5c:	3401      	adds	r4, #1
   b5d5e:	2c08      	cmp	r4, #8
   b5d60:	d002      	beq.n	b5d68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5d62:	0840      	lsrs	r0, r0, #1
   b5d64:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5d66:	e7f5      	b.n	b5d54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5d68:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5d6a:	4b02      	ldr	r3, [pc, #8]	; (b5d74 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5d6c:	5d5b      	ldrb	r3, [r3, r5]
   b5d6e:	7013      	strb	r3, [r2, #0]
}
   b5d70:	bd30      	pop	{r4, r5, pc}
   b5d72:	bf00      	nop
   b5d74:	000b75e0 	.word	0x000b75e0

000b5d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d7c:	4606      	mov	r6, r0
   b5d7e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5d80:	7800      	ldrb	r0, [r0, #0]
{
   b5d82:	460c      	mov	r4, r1
    CHECK(lock());
   b5d84:	f7ff ffa9 	bl	b5cda <_ZN8SPIClass4lockEv.isra.0>
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	db1b      	blt.n	b5dc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5d8c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5d8e:	2214      	movs	r2, #20
   b5d90:	2100      	movs	r1, #0
   b5d92:	a809      	add	r0, sp, #36	; 0x24
   b5d94:	f000 fd7a 	bl	b688c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5d98:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5d9a:	2200      	movs	r2, #0
   b5d9c:	a909      	add	r1, sp, #36	; 0x24
   b5d9e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5da0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5da4:	f7ff fe3c 	bl	b5a20 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5da8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5dac:	b113      	cbz	r3, b5db4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5dae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5db2:	b155      	cbz	r5, b5dca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5db4:	2700      	movs	r7, #0
   b5db6:	46b9      	mov	r9, r7
   b5db8:	46b8      	mov	r8, r7
   b5dba:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5dbc:	7923      	ldrb	r3, [r4, #4]
   b5dbe:	b15d      	cbz	r5, b5dd8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5dc0:	b1c3      	cbz	r3, b5df4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5dc2:	2000      	movs	r0, #0
}
   b5dc4:	b00f      	add	sp, #60	; 0x3c
   b5dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5dca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5dce:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5dd2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5dd6:	e7f1      	b.n	b5dbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5dd8:	2b00      	cmp	r3, #0
   b5dda:	d135      	bne.n	b5e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5ddc:	68a3      	ldr	r3, [r4, #8]
   b5dde:	4543      	cmp	r3, r8
   b5de0:	d108      	bne.n	b5df4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5de2:	f88d 9020 	strb.w	r9, [sp, #32]
   b5de6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5dea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5dee:	89a3      	ldrh	r3, [r4, #12]
   b5df0:	429a      	cmp	r2, r3
   b5df2:	d0e6      	beq.n	b5dc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5df4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5df6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5df8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5dfc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5dfe:	ab04      	add	r3, sp, #16
   b5e00:	f10d 020f 	add.w	r2, sp, #15
   b5e04:	f7ff ffa2 	bl	b5d4c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5e08:	7921      	ldrb	r1, [r4, #4]
   b5e0a:	b985      	cbnz	r5, b5e2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5e0c:	b989      	cbnz	r1, b5e32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5e0e:	68a3      	ldr	r3, [r4, #8]
   b5e10:	4543      	cmp	r3, r8
   b5e12:	d30e      	bcc.n	b5e32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5e14:	f88d 9020 	strb.w	r9, [sp, #32]
   b5e18:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5e1c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5e20:	89a3      	ldrh	r3, [r4, #12]
   b5e22:	429a      	cmp	r2, r3
   b5e24:	d105      	bne.n	b5e32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5e26:	9b04      	ldr	r3, [sp, #16]
   b5e28:	4543      	cmp	r3, r8
   b5e2a:	d102      	bne.n	b5e32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5e2c:	e7c9      	b.n	b5dc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5e2e:	2900      	cmp	r1, #0
   b5e30:	d1f9      	bne.n	b5e26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5e32:	2300      	movs	r3, #0
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	7b63      	ldrb	r3, [r4, #13]
   b5e38:	9300      	str	r3, [sp, #0]
   b5e3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5e3e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5e40:	7830      	ldrb	r0, [r6, #0]
   b5e42:	f7ff fdf5 	bl	b5a30 <hal_spi_set_settings>
   b5e46:	e7bc      	b.n	b5dc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5e48:	e9cd 5500 	strd	r5, r5, [sp]
   b5e4c:	462b      	mov	r3, r5
   b5e4e:	462a      	mov	r2, r5
   b5e50:	2101      	movs	r1, #1
   b5e52:	e7f5      	b.n	b5e40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5e54 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5e54:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5e56:	7800      	ldrb	r0, [r0, #0]
   b5e58:	f7ff fdca 	bl	b59f0 <hal_spi_transfer>
}
   b5e5c:	b2c0      	uxtb	r0, r0
   b5e5e:	bd08      	pop	{r3, pc}

000b5e60 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5e60:	4b05      	ldr	r3, [pc, #20]	; (b5e78 <_GLOBAL__sub_I_System+0x18>)
   b5e62:	2202      	movs	r2, #2
   b5e64:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5e66:	4b05      	ldr	r3, [pc, #20]	; (b5e7c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5e68:	4a05      	ldr	r2, [pc, #20]	; (b5e80 <_GLOBAL__sub_I_System+0x20>)
   b5e6a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5e6c:	2000      	movs	r0, #0
   b5e6e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e72:	f7ff be35 	b.w	b5ae0 <set_system_mode>
   b5e76:	bf00      	nop
   b5e78:	2003e6d8 	.word	0x2003e6d8
   b5e7c:	2003e6cc 	.word	0x2003e6cc
   b5e80:	ffff0000 	.word	0xffff0000

000b5e84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5e84:	4802      	ldr	r0, [pc, #8]	; (b5e90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5e86:	2300      	movs	r3, #0
   b5e88:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5e8a:	f7ff bd01 	b.w	b5890 <os_mutex_recursive_create>
   b5e8e:	bf00      	nop
   b5e90:	2003e6dc 	.word	0x2003e6dc

000b5e94 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e96:	4606      	mov	r6, r0
   b5e98:	460d      	mov	r5, r1
  size_t n = 0;
   b5e9a:	188f      	adds	r7, r1, r2
   b5e9c:	2400      	movs	r4, #0
  while (size--) {
   b5e9e:	42bd      	cmp	r5, r7
   b5ea0:	d00c      	beq.n	b5ebc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5ea2:	6833      	ldr	r3, [r6, #0]
   b5ea4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ea8:	689b      	ldr	r3, [r3, #8]
   b5eaa:	4630      	mov	r0, r6
   b5eac:	4798      	blx	r3
     if (chunk>=0)
   b5eae:	1e03      	subs	r3, r0, #0
   b5eb0:	db01      	blt.n	b5eb6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5eb2:	441c      	add	r4, r3
  while (size--) {
   b5eb4:	e7f3      	b.n	b5e9e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5eb6:	2c00      	cmp	r4, #0
   b5eb8:	bf08      	it	eq
   b5eba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ec0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5ec0:	b513      	push	{r0, r1, r4, lr}
   b5ec2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5ec4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5ec6:	b159      	cbz	r1, b5ee0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5ec8:	9101      	str	r1, [sp, #4]
   b5eca:	f7fe f8a7 	bl	b401c <strlen>
   b5ece:	6823      	ldr	r3, [r4, #0]
   b5ed0:	9901      	ldr	r1, [sp, #4]
   b5ed2:	68db      	ldr	r3, [r3, #12]
   b5ed4:	4602      	mov	r2, r0
   b5ed6:	4620      	mov	r0, r4
    }
   b5ed8:	b002      	add	sp, #8
   b5eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5ede:	4718      	bx	r3
    }
   b5ee0:	b002      	add	sp, #8
   b5ee2:	bd10      	pop	{r4, pc}

000b5ee4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5ee4:	b508      	push	{r3, lr}
  return write(str);
   b5ee6:	f7ff ffeb 	bl	b5ec0 <_ZN5Print5writeEPKc>
}
   b5eea:	bd08      	pop	{r3, pc}

000b5eec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5eec:	6803      	ldr	r3, [r0, #0]
   b5eee:	689b      	ldr	r3, [r3, #8]
   b5ef0:	4718      	bx	r3

000b5ef2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5ef2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5ef4:	210d      	movs	r1, #13
{
   b5ef6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5ef8:	f7ff fff8 	bl	b5eec <_ZN5Print5printEc>
  n += print('\n');
   b5efc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5efe:	4604      	mov	r4, r0
  n += print('\n');
   b5f00:	4628      	mov	r0, r5
   b5f02:	f7ff fff3 	bl	b5eec <_ZN5Print5printEc>
  return n;
}
   b5f06:	4420      	add	r0, r4
   b5f08:	bd38      	pop	{r3, r4, r5, pc}

000b5f0a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5f0a:	b538      	push	{r3, r4, r5, lr}
   b5f0c:	4605      	mov	r5, r0
  return write(str);
   b5f0e:	f7ff ffd7 	bl	b5ec0 <_ZN5Print5writeEPKc>
   b5f12:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5f14:	4628      	mov	r0, r5
   b5f16:	f7ff ffec 	bl	b5ef2 <_ZN5Print7printlnEv>
  return n;
}
   b5f1a:	4420      	add	r0, r4
   b5f1c:	bd38      	pop	{r3, r4, r5, pc}

000b5f1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5f1e:	b530      	push	{r4, r5, lr}
   b5f20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5f22:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5f24:	2a01      	cmp	r2, #1
  *str = '\0';
   b5f26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5f2a:	bf98      	it	ls
   b5f2c:	220a      	movls	r2, #10
   b5f2e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5f30:	460d      	mov	r5, r1
   b5f32:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5f36:	fb01 5312 	mls	r3, r1, r2, r5
   b5f3a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f3e:	2b09      	cmp	r3, #9
   b5f40:	bf94      	ite	ls
   b5f42:	3330      	addls	r3, #48	; 0x30
   b5f44:	3337      	addhi	r3, #55	; 0x37
   b5f46:	b2db      	uxtb	r3, r3
  } while(n);
   b5f48:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5f4a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5f4e:	d9ef      	bls.n	b5f30 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5f50:	4621      	mov	r1, r4
   b5f52:	f7ff ffb5 	bl	b5ec0 <_ZN5Print5writeEPKc>
}
   b5f56:	b00b      	add	sp, #44	; 0x2c
   b5f58:	bd30      	pop	{r4, r5, pc}

000b5f5a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f5e:	b086      	sub	sp, #24
   b5f60:	af00      	add	r7, sp, #0
   b5f62:	4605      	mov	r5, r0
   b5f64:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5f66:	1d38      	adds	r0, r7, #4
   b5f68:	2114      	movs	r1, #20
{
   b5f6a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5f6c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5f6e:	f7ff fe5b 	bl	b5c28 <vsnprintf>

    if (n<bufsize)
   b5f72:	2813      	cmp	r0, #19
   b5f74:	d80e      	bhi.n	b5f94 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5f76:	1d39      	adds	r1, r7, #4
   b5f78:	4628      	mov	r0, r5
   b5f7a:	f7ff ffa1 	bl	b5ec0 <_ZN5Print5writeEPKc>
   b5f7e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5f80:	b11e      	cbz	r6, b5f8a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5f82:	4628      	mov	r0, r5
   b5f84:	f7ff ffb5 	bl	b5ef2 <_ZN5Print7printlnEv>
   b5f88:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5f8a:	4620      	mov	r0, r4
   b5f8c:	3718      	adds	r7, #24
   b5f8e:	46bd      	mov	sp, r7
   b5f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5f94:	f100 0308 	add.w	r3, r0, #8
   b5f98:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5f9c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5f9e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5fa2:	4622      	mov	r2, r4
   b5fa4:	1c41      	adds	r1, r0, #1
   b5fa6:	683b      	ldr	r3, [r7, #0]
   b5fa8:	4668      	mov	r0, sp
   b5faa:	f7ff fe3d 	bl	b5c28 <vsnprintf>
  return write(str);
   b5fae:	4669      	mov	r1, sp
   b5fb0:	4628      	mov	r0, r5
   b5fb2:	f7ff ff85 	bl	b5ec0 <_ZN5Print5writeEPKc>
   b5fb6:	4604      	mov	r4, r0
   b5fb8:	46c5      	mov	sp, r8
   b5fba:	e7e1      	b.n	b5f80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5fbc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5fbc:	4b01      	ldr	r3, [pc, #4]	; (b5fc4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5fbe:	4a02      	ldr	r2, [pc, #8]	; (b5fc8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5fc0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5fc2:	4770      	bx	lr
   b5fc4:	2003e6e0 	.word	0x2003e6e0
   b5fc8:	000b75e8 	.word	0x000b75e8

000b5fcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5fcc:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5fce:	681a      	ldr	r2, [r3, #0]
   b5fd0:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5fd2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5fd4:	4770      	bx	lr
   b5fd6:	bf00      	nop
   b5fd8:	2003e5a4 	.word	0x2003e5a4
   b5fdc:	2003e6e4 	.word	0x2003e6e4

000b5fe0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5fe0:	2100      	movs	r1, #0
   b5fe2:	f7ff bd85 	b.w	b5af0 <system_delay_ms>
	...

000b5fe8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5fe8:	4b01      	ldr	r3, [pc, #4]	; (b5ff0 <_GLOBAL__sub_I_RGB+0x8>)
   b5fea:	2200      	movs	r2, #0
   b5fec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5fee:	4770      	bx	lr
   b5ff0:	2003e6e8 	.word	0x2003e6e8

000b5ff4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5ff4:	4b01      	ldr	r3, [pc, #4]	; (b5ffc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5ff6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5ff8:	4770      	bx	lr
   b5ffa:	bf00      	nop
   b5ffc:	2003e5a8 	.word	0x2003e5a8

000b6000 <serialEventRun>:
{
   b6000:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6002:	4b0b      	ldr	r3, [pc, #44]	; (b6030 <serialEventRun+0x30>)
   b6004:	b143      	cbz	r3, b6018 <serialEventRun+0x18>
   b6006:	f000 f967 	bl	b62d8 <_Z16_fetch_usbserialv>
   b600a:	6803      	ldr	r3, [r0, #0]
   b600c:	691b      	ldr	r3, [r3, #16]
   b600e:	4798      	blx	r3
   b6010:	2800      	cmp	r0, #0
   b6012:	dd01      	ble.n	b6018 <serialEventRun+0x18>
        serialEvent();
   b6014:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6018:	4b06      	ldr	r3, [pc, #24]	; (b6034 <serialEventRun+0x34>)
   b601a:	b143      	cbz	r3, b602e <serialEventRun+0x2e>
   b601c:	f000 fbbc 	bl	b6798 <_Z22__fetch_global_Serial1v>
   b6020:	6803      	ldr	r3, [r0, #0]
   b6022:	691b      	ldr	r3, [r3, #16]
   b6024:	4798      	blx	r3
   b6026:	2800      	cmp	r0, #0
   b6028:	dd01      	ble.n	b602e <serialEventRun+0x2e>
        serialEvent1();
   b602a:	f3af 8000 	nop.w
}
   b602e:	bd08      	pop	{r3, pc}
	...

000b6038 <_post_loop>:
{
   b6038:	b508      	push	{r3, lr}
	serialEventRun();
   b603a:	f7ff ffe1 	bl	b6000 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b603e:	f7ff fc0f 	bl	b5860 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6042:	4b01      	ldr	r3, [pc, #4]	; (b6048 <_post_loop+0x10>)
   b6044:	6018      	str	r0, [r3, #0]
}
   b6046:	bd08      	pop	{r3, pc}
   b6048:	2003e740 	.word	0x2003e740

000b604c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b604c:	4805      	ldr	r0, [pc, #20]	; (b6064 <_Z33system_initialize_user_backup_ramv+0x18>)
   b604e:	4a06      	ldr	r2, [pc, #24]	; (b6068 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6050:	4906      	ldr	r1, [pc, #24]	; (b606c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6052:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6054:	1a12      	subs	r2, r2, r0
   b6056:	f000 fc0b 	bl	b6870 <memcpy>
    __backup_sram_signature = signature;
   b605a:	4b05      	ldr	r3, [pc, #20]	; (b6070 <_Z33system_initialize_user_backup_ramv+0x24>)
   b605c:	4a05      	ldr	r2, [pc, #20]	; (b6074 <_Z33system_initialize_user_backup_ramv+0x28>)
   b605e:	601a      	str	r2, [r3, #0]
}
   b6060:	bd08      	pop	{r3, pc}
   b6062:	bf00      	nop
   b6064:	2003f400 	.word	0x2003f400
   b6068:	2003f404 	.word	0x2003f404
   b606c:	000b7868 	.word	0x000b7868
   b6070:	2003f400 	.word	0x2003f400
   b6074:	9a271c1e 	.word	0x9a271c1e

000b6078 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6078:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b607a:	2300      	movs	r3, #0
   b607c:	9300      	str	r3, [sp, #0]
   b607e:	461a      	mov	r2, r3
   b6080:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6084:	f7ff fd4e 	bl	b5b24 <system_ctrl_set_result>
}
   b6088:	b003      	add	sp, #12
   b608a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6090 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6090:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6092:	8843      	ldrh	r3, [r0, #2]
   b6094:	2b0a      	cmp	r3, #10
   b6096:	d008      	beq.n	b60aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6098:	2b50      	cmp	r3, #80	; 0x50
   b609a:	d10b      	bne.n	b60b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b609c:	4b09      	ldr	r3, [pc, #36]	; (b60c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b609e:	681b      	ldr	r3, [r3, #0]
   b60a0:	b14b      	cbz	r3, b60b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b60a2:	b003      	add	sp, #12
   b60a4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b60a8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b60aa:	f7ff ffe5 	bl	b6078 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b60ae:	b003      	add	sp, #12
   b60b0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b60b4:	2300      	movs	r3, #0
   b60b6:	9300      	str	r3, [sp, #0]
   b60b8:	461a      	mov	r2, r3
   b60ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b60be:	f7ff fd31 	bl	b5b24 <system_ctrl_set_result>
}
   b60c2:	e7f4      	b.n	b60ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b60c4:	2003e6fc 	.word	0x2003e6fc

000b60c8 <module_user_init_hook>:
{
   b60c8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b60ca:	4812      	ldr	r0, [pc, #72]	; (b6114 <module_user_init_hook+0x4c>)
   b60cc:	2100      	movs	r1, #0
   b60ce:	f7ff fdbb 	bl	b5c48 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b60d2:	4b11      	ldr	r3, [pc, #68]	; (b6118 <module_user_init_hook+0x50>)
   b60d4:	681a      	ldr	r2, [r3, #0]
   b60d6:	4b11      	ldr	r3, [pc, #68]	; (b611c <module_user_init_hook+0x54>)
   b60d8:	429a      	cmp	r2, r3
   b60da:	4b11      	ldr	r3, [pc, #68]	; (b6120 <module_user_init_hook+0x58>)
   b60dc:	bf0c      	ite	eq
   b60de:	2201      	moveq	r2, #1
   b60e0:	2200      	movne	r2, #0
   b60e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b60e4:	d001      	beq.n	b60ea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b60e6:	f7ff ffb1 	bl	b604c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b60ea:	f7ff fba9 	bl	b5840 <HAL_RNG_GetRandomNumber>
   b60ee:	4604      	mov	r4, r0
    srand(seed);
   b60f0:	f000 fbd4 	bl	b689c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b60f4:	4b0b      	ldr	r3, [pc, #44]	; (b6124 <module_user_init_hook+0x5c>)
   b60f6:	b113      	cbz	r3, b60fe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b60f8:	4620      	mov	r0, r4
   b60fa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b60fe:	2100      	movs	r1, #0
   b6100:	4808      	ldr	r0, [pc, #32]	; (b6124 <module_user_init_hook+0x5c>)
   b6102:	f7ff fd79 	bl	b5bf8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b610a:	4807      	ldr	r0, [pc, #28]	; (b6128 <module_user_init_hook+0x60>)
   b610c:	2100      	movs	r1, #0
   b610e:	f7ff bcff 	b.w	b5b10 <system_ctrl_set_app_request_handler>
   b6112:	bf00      	nop
   b6114:	000b5ff5 	.word	0x000b5ff5
   b6118:	2003f400 	.word	0x2003f400
   b611c:	9a271c1e 	.word	0x9a271c1e
   b6120:	2003e6f8 	.word	0x2003e6f8
   b6124:	00000000 	.word	0x00000000
   b6128:	000b6091 	.word	0x000b6091

000b612c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b612c:	4770      	bx	lr

000b612e <_ZN9IPAddressD0Ev>:
   b612e:	b510      	push	{r4, lr}
   b6130:	2118      	movs	r1, #24
   b6132:	4604      	mov	r4, r0
   b6134:	f7fd ffb7 	bl	b40a6 <_ZdlPvj>
   b6138:	4620      	mov	r0, r4
   b613a:	bd10      	pop	{r4, pc}

000b613c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b613c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b613e:	7d03      	ldrb	r3, [r0, #20]
   b6140:	2b06      	cmp	r3, #6
{
   b6142:	b08d      	sub	sp, #52	; 0x34
   b6144:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6146:	f100 0704 	add.w	r7, r0, #4
   b614a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b614e:	d012      	beq.n	b6176 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6150:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6154:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6158:	220a      	movs	r2, #10
   b615a:	4630      	mov	r0, r6
   b615c:	f7ff fedf 	bl	b5f1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6160:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6162:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6164:	d019      	beq.n	b619a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6166:	2c00      	cmp	r4, #0
   b6168:	d0f4      	beq.n	b6154 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b616a:	212e      	movs	r1, #46	; 0x2e
   b616c:	4630      	mov	r0, r6
   b616e:	f7ff febd 	bl	b5eec <_ZN5Print5printEc>
   b6172:	4404      	add	r4, r0
   b6174:	e7ee      	b.n	b6154 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6176:	232f      	movs	r3, #47	; 0x2f
   b6178:	466a      	mov	r2, sp
   b617a:	4639      	mov	r1, r7
   b617c:	200a      	movs	r0, #10
		buf[0] = 0;
   b617e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6182:	f7ff fb8d 	bl	b58a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6186:	4668      	mov	r0, sp
   b6188:	f7fd ff48 	bl	b401c <strlen>
   b618c:	6833      	ldr	r3, [r6, #0]
   b618e:	4602      	mov	r2, r0
   b6190:	68db      	ldr	r3, [r3, #12]
   b6192:	4669      	mov	r1, sp
   b6194:	4630      	mov	r0, r6
   b6196:	4798      	blx	r3
   b6198:	4604      	mov	r4, r0
    }
    return n;
}
   b619a:	4620      	mov	r0, r4
   b619c:	b00d      	add	sp, #52	; 0x34
   b619e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b61a0:	b510      	push	{r4, lr}
   b61a2:	4b05      	ldr	r3, [pc, #20]	; (b61b8 <_ZN9IPAddressC1Ev+0x18>)
   b61a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b61a6:	2211      	movs	r2, #17
   b61a8:	f840 3b04 	str.w	r3, [r0], #4
   b61ac:	2100      	movs	r1, #0
   b61ae:	f000 fb6d 	bl	b688c <memset>
}
   b61b2:	4620      	mov	r0, r4
   b61b4:	bd10      	pop	{r4, pc}
   b61b6:	bf00      	nop
   b61b8:	000b7610 	.word	0x000b7610

000b61bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b61bc:	4603      	mov	r3, r0
   b61be:	4a07      	ldr	r2, [pc, #28]	; (b61dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b61c0:	b510      	push	{r4, lr}
   b61c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b61c6:	f101 0210 	add.w	r2, r1, #16
   b61ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b61ce:	f843 4b04 	str.w	r4, [r3], #4
   b61d2:	4291      	cmp	r1, r2
   b61d4:	d1f9      	bne.n	b61ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b61d6:	780a      	ldrb	r2, [r1, #0]
   b61d8:	701a      	strb	r2, [r3, #0]
}
   b61da:	bd10      	pop	{r4, pc}
   b61dc:	000b7610 	.word	0x000b7610

000b61e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b61e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b61e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b61e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b61ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b61ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b61f2:	2304      	movs	r3, #4
   b61f4:	6041      	str	r1, [r0, #4]
   b61f6:	7503      	strb	r3, [r0, #20]
}
   b61f8:	bd10      	pop	{r4, pc}
	...

000b61fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b61fc:	b507      	push	{r0, r1, r2, lr}
   b61fe:	4b06      	ldr	r3, [pc, #24]	; (b6218 <_ZN9IPAddressC1EPKh+0x1c>)
   b6200:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6202:	78cb      	ldrb	r3, [r1, #3]
   b6204:	9300      	str	r3, [sp, #0]
   b6206:	788b      	ldrb	r3, [r1, #2]
   b6208:	784a      	ldrb	r2, [r1, #1]
   b620a:	7809      	ldrb	r1, [r1, #0]
   b620c:	f7ff ffe8 	bl	b61e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6210:	b003      	add	sp, #12
   b6212:	f85d fb04 	ldr.w	pc, [sp], #4
   b6216:	bf00      	nop
   b6218:	000b7610 	.word	0x000b7610

000b621c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b621c:	7441      	strb	r1, [r0, #17]
}
   b621e:	4770      	bx	lr

000b6220 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6220:	4770      	bx	lr

000b6222 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6222:	4770      	bx	lr

000b6224 <_ZN9USBSerial4readEv>:
{
   b6224:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6226:	2100      	movs	r1, #0
   b6228:	7c00      	ldrb	r0, [r0, #16]
   b622a:	f7ff fc39 	bl	b5aa0 <HAL_USB_USART_Receive_Data>
}
   b622e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6232:	bd08      	pop	{r3, pc}

000b6234 <_ZN9USBSerial4peekEv>:
{
   b6234:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6236:	2101      	movs	r1, #1
   b6238:	7c00      	ldrb	r0, [r0, #16]
   b623a:	f7ff fc31 	bl	b5aa0 <HAL_USB_USART_Receive_Data>
}
   b623e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6242:	bd08      	pop	{r3, pc}

000b6244 <_ZN9USBSerial17availableForWriteEv>:
{
   b6244:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6246:	7c00      	ldrb	r0, [r0, #16]
   b6248:	f7ff fc22 	bl	b5a90 <HAL_USB_USART_Available_Data_For_Write>
}
   b624c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6250:	bd08      	pop	{r3, pc}

000b6252 <_ZN9USBSerial9availableEv>:
{
   b6252:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6254:	7c00      	ldrb	r0, [r0, #16]
   b6256:	f7ff fc13 	bl	b5a80 <HAL_USB_USART_Available_Data>
}
   b625a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b625e:	bd08      	pop	{r3, pc}

000b6260 <_ZN9USBSerial5writeEh>:
{
   b6260:	b513      	push	{r0, r1, r4, lr}
   b6262:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6264:	7c00      	ldrb	r0, [r0, #16]
{
   b6266:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6268:	f7ff fc12 	bl	b5a90 <HAL_USB_USART_Available_Data_For_Write>
   b626c:	2800      	cmp	r0, #0
   b626e:	9901      	ldr	r1, [sp, #4]
   b6270:	dc01      	bgt.n	b6276 <_ZN9USBSerial5writeEh+0x16>
   b6272:	7c60      	ldrb	r0, [r4, #17]
   b6274:	b120      	cbz	r0, b6280 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6276:	7c20      	ldrb	r0, [r4, #16]
   b6278:	f7ff fc1a 	bl	b5ab0 <HAL_USB_USART_Send_Data>
   b627c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6280:	b002      	add	sp, #8
   b6282:	bd10      	pop	{r4, pc}

000b6284 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6284:	7c00      	ldrb	r0, [r0, #16]
   b6286:	f7ff bc1b 	b.w	b5ac0 <HAL_USB_USART_Flush_Data>

000b628a <_ZN9USBSerialD0Ev>:
   b628a:	b510      	push	{r4, lr}
   b628c:	2114      	movs	r1, #20
   b628e:	4604      	mov	r4, r0
   b6290:	f7fd ff09 	bl	b40a6 <_ZdlPvj>
   b6294:	4620      	mov	r0, r4
   b6296:	bd10      	pop	{r4, pc}

000b6298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6298:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b629a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b629e:	4604      	mov	r4, r0
   b62a0:	4608      	mov	r0, r1
   b62a2:	2100      	movs	r1, #0
   b62a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b62a8:	4b04      	ldr	r3, [pc, #16]	; (b62bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b62aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b62ac:	2301      	movs	r3, #1
  _serial = serial;
   b62ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b62b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b62b2:	4611      	mov	r1, r2
   b62b4:	f7ff fbd4 	bl	b5a60 <HAL_USB_USART_Init>
}
   b62b8:	4620      	mov	r0, r4
   b62ba:	bd10      	pop	{r4, pc}
   b62bc:	000b7624 	.word	0x000b7624

000b62c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b62c0:	7c00      	ldrb	r0, [r0, #16]
   b62c2:	2200      	movs	r2, #0
   b62c4:	f7ff bbd4 	b.w	b5a70 <HAL_USB_USART_Begin>

000b62c8 <_Z19acquireSerialBufferv>:
{
   b62c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b62ca:	2214      	movs	r2, #20
{
   b62cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b62ce:	2100      	movs	r1, #0
   b62d0:	f000 fadc 	bl	b688c <memset>
}
   b62d4:	4620      	mov	r0, r4
   b62d6:	bd10      	pop	{r4, pc}

000b62d8 <_Z16_fetch_usbserialv>:
{
   b62d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b62da:	4c0f      	ldr	r4, [pc, #60]	; (b6318 <_Z16_fetch_usbserialv+0x40>)
{
   b62dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b62de:	a803      	add	r0, sp, #12
   b62e0:	f7ff fff2 	bl	b62c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b62e4:	7821      	ldrb	r1, [r4, #0]
   b62e6:	f3bf 8f5b 	dmb	ish
   b62ea:	f011 0101 	ands.w	r1, r1, #1
   b62ee:	d10f      	bne.n	b6310 <_Z16_fetch_usbserialv+0x38>
   b62f0:	4620      	mov	r0, r4
   b62f2:	9101      	str	r1, [sp, #4]
   b62f4:	f7fd fee6 	bl	b40c4 <__cxa_guard_acquire>
   b62f8:	9901      	ldr	r1, [sp, #4]
   b62fa:	b148      	cbz	r0, b6310 <_Z16_fetch_usbserialv+0x38>
   b62fc:	aa03      	add	r2, sp, #12
   b62fe:	4807      	ldr	r0, [pc, #28]	; (b631c <_Z16_fetch_usbserialv+0x44>)
   b6300:	f7ff ffca 	bl	b6298 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6304:	4620      	mov	r0, r4
   b6306:	f7fd fee2 	bl	b40ce <__cxa_guard_release>
   b630a:	4805      	ldr	r0, [pc, #20]	; (b6320 <_Z16_fetch_usbserialv+0x48>)
   b630c:	f000 faaa 	bl	b6864 <atexit>
	return _usbserial;
}
   b6310:	4802      	ldr	r0, [pc, #8]	; (b631c <_Z16_fetch_usbserialv+0x44>)
   b6312:	b008      	add	sp, #32
   b6314:	bd10      	pop	{r4, pc}
   b6316:	bf00      	nop
   b6318:	2003e700 	.word	0x2003e700
   b631c:	2003e704 	.word	0x2003e704
   b6320:	000b6221 	.word	0x000b6221

000b6324 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6324:	4770      	bx	lr

000b6326 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6326:	7441      	strb	r1, [r0, #17]
}
   b6328:	4770      	bx	lr

000b632a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b632a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b632c:	7c00      	ldrb	r0, [r0, #16]
   b632e:	f7ff faef 	bl	b5910 <hal_usart_available_data_for_write>
}
   b6332:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6336:	bd08      	pop	{r3, pc}

000b6338 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6338:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b633a:	7c00      	ldrb	r0, [r0, #16]
   b633c:	f7ff fac0 	bl	b58c0 <hal_usart_available>
}
   b6340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6344:	bd08      	pop	{r3, pc}

000b6346 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6346:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6348:	7c00      	ldrb	r0, [r0, #16]
   b634a:	f7ff fac9 	bl	b58e0 <hal_usart_peek>
}
   b634e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6352:	bd08      	pop	{r3, pc}

000b6354 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6354:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6356:	7c00      	ldrb	r0, [r0, #16]
   b6358:	f7ff faba 	bl	b58d0 <hal_usart_read>
}
   b635c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6360:	bd08      	pop	{r3, pc}

000b6362 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6362:	7c00      	ldrb	r0, [r0, #16]
   b6364:	f7ff bac4 	b.w	b58f0 <hal_usart_flush>

000b6368 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6368:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b636a:	7c45      	ldrb	r5, [r0, #17]
{
   b636c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b636e:	b12d      	cbz	r5, b637c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6370:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6372:	b003      	add	sp, #12
   b6374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6378:	f7ff ba9a 	b.w	b58b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b637c:	7c00      	ldrb	r0, [r0, #16]
   b637e:	9101      	str	r1, [sp, #4]
   b6380:	f7ff fac6 	bl	b5910 <hal_usart_available_data_for_write>
   b6384:	2800      	cmp	r0, #0
   b6386:	9901      	ldr	r1, [sp, #4]
   b6388:	dcf2      	bgt.n	b6370 <_ZN11USARTSerial5writeEh+0x8>
}
   b638a:	4628      	mov	r0, r5
   b638c:	b003      	add	sp, #12
   b638e:	bd30      	pop	{r4, r5, pc}

000b6390 <_ZN11USARTSerialD0Ev>:
   b6390:	b510      	push	{r4, lr}
   b6392:	2114      	movs	r1, #20
   b6394:	4604      	mov	r4, r0
   b6396:	f7fd fe86 	bl	b40a6 <_ZdlPvj>
   b639a:	4620      	mov	r0, r4
   b639c:	bd10      	pop	{r4, pc}
	...

000b63a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b63a0:	b510      	push	{r4, lr}
   b63a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b63a6:	4604      	mov	r4, r0
   b63a8:	4608      	mov	r0, r1
   b63aa:	4611      	mov	r1, r2
   b63ac:	2200      	movs	r2, #0
   b63ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b63b2:	4b04      	ldr	r3, [pc, #16]	; (b63c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b63b4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b63b6:	2301      	movs	r3, #1
  _serial = serial;
   b63b8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b63ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b63bc:	f7ff fab0 	bl	b5920 <hal_usart_init_ex>
}
   b63c0:	4620      	mov	r0, r4
   b63c2:	bd10      	pop	{r4, pc}
   b63c4:	000b7654 	.word	0x000b7654

000b63c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b63c8:	4770      	bx	lr

000b63ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b63ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63cc:	4606      	mov	r6, r0
   b63ce:	4615      	mov	r5, r2
   b63d0:	460c      	mov	r4, r1
   b63d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b63d4:	42bc      	cmp	r4, r7
   b63d6:	d006      	beq.n	b63e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b63d8:	6833      	ldr	r3, [r6, #0]
   b63da:	f814 1b01 	ldrb.w	r1, [r4], #1
   b63de:	689b      	ldr	r3, [r3, #8]
   b63e0:	4630      	mov	r0, r6
   b63e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b63e4:	e7f6      	b.n	b63d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b63e6:	4628      	mov	r0, r5
   b63e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b63ea:	7c00      	ldrb	r0, [r0, #16]
   b63ec:	2200      	movs	r2, #0
   b63ee:	f7ff babf 	b.w	b5970 <hal_i2c_write>

000b63f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b63f2:	7c00      	ldrb	r0, [r0, #16]
   b63f4:	2100      	movs	r1, #0
   b63f6:	f7ff bac3 	b.w	b5980 <hal_i2c_available>

000b63fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b63fa:	7c00      	ldrb	r0, [r0, #16]
   b63fc:	2100      	movs	r1, #0
   b63fe:	f7ff bac7 	b.w	b5990 <hal_i2c_read>

000b6402 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6402:	7c00      	ldrb	r0, [r0, #16]
   b6404:	2100      	movs	r1, #0
   b6406:	f7ff bacb 	b.w	b59a0 <hal_i2c_peek>

000b640a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b640a:	7c00      	ldrb	r0, [r0, #16]
   b640c:	2100      	movs	r1, #0
   b640e:	f7ff bacf 	b.w	b59b0 <hal_i2c_flush>

000b6412 <_ZN7TwoWireD0Ev>:
   b6412:	b510      	push	{r4, lr}
   b6414:	2114      	movs	r1, #20
   b6416:	4604      	mov	r4, r0
   b6418:	f7fd fe45 	bl	b40a6 <_ZdlPvj>
   b641c:	4620      	mov	r0, r4
   b641e:	bd10      	pop	{r4, pc}

000b6420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6420:	b538      	push	{r3, r4, r5, lr}
   b6422:	4604      	mov	r4, r0
   b6424:	4615      	mov	r5, r2
   b6426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b642a:	2200      	movs	r2, #0
   b642c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6430:	4b09      	ldr	r3, [pc, #36]	; (b6458 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6432:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6434:	4608      	mov	r0, r1
   b6436:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6438:	4629      	mov	r1, r5
   b643a:	f7ff fac9 	bl	b59d0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b643e:	30bf      	adds	r0, #191	; 0xbf
   b6440:	d108      	bne.n	b6454 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6442:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6444:	07db      	lsls	r3, r3, #31
   b6446:	d505      	bpl.n	b6454 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6448:	6868      	ldr	r0, [r5, #4]
   b644a:	f7ff fbe5 	bl	b5c18 <free>
    free(conf.tx_buffer);
   b644e:	68e8      	ldr	r0, [r5, #12]
   b6450:	f7ff fbe2 	bl	b5c18 <free>
}
   b6454:	4620      	mov	r0, r4
   b6456:	bd38      	pop	{r3, r4, r5, pc}
   b6458:	000b7684 	.word	0x000b7684

000b645c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b645c:	7c00      	ldrb	r0, [r0, #16]
   b645e:	2200      	movs	r2, #0
   b6460:	f7ff ba66 	b.w	b5930 <hal_i2c_set_speed>

000b6464 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6464:	2300      	movs	r3, #0
   b6466:	7c00      	ldrb	r0, [r0, #16]
   b6468:	461a      	mov	r2, r3
   b646a:	4619      	mov	r1, r3
   b646c:	f7ff ba68 	b.w	b5940 <hal_i2c_begin>

000b6470 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6470:	7c00      	ldrb	r0, [r0, #16]
   b6472:	2200      	movs	r2, #0
   b6474:	f7ff ba6c 	b.w	b5950 <hal_i2c_begin_transmission>

000b6478 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6478:	b2c9      	uxtb	r1, r1
   b647a:	f7ff bff9 	b.w	b6470 <_ZN7TwoWire17beginTransmissionEh>

000b647e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b647e:	7c00      	ldrb	r0, [r0, #16]
   b6480:	2200      	movs	r2, #0
   b6482:	f7ff ba6d 	b.w	b5960 <hal_i2c_end_transmission>

000b6486 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6486:	2101      	movs	r1, #1
   b6488:	f7ff bff9 	b.w	b647e <_ZN7TwoWire15endTransmissionEh>

000b648c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b648c:	2200      	movs	r2, #0
   b648e:	6840      	ldr	r0, [r0, #4]
   b6490:	4611      	mov	r1, r2
   b6492:	f7ff bb69 	b.w	b5b68 <network_ready>

000b6496 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6496:	2200      	movs	r2, #0
   b6498:	6840      	ldr	r0, [r0, #4]
   b649a:	4611      	mov	r1, r2
   b649c:	f7ff bb84 	b.w	b5ba8 <network_listening>

000b64a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b64a0:	2200      	movs	r2, #0
   b64a2:	6840      	ldr	r0, [r0, #4]
   b64a4:	4611      	mov	r1, r2
   b64a6:	f7ff bb8f 	b.w	b5bc8 <network_get_listen_timeout>

000b64aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b64aa:	6840      	ldr	r0, [r0, #4]
   b64ac:	2200      	movs	r2, #0
   b64ae:	f7ff bb83 	b.w	b5bb8 <network_set_listen_timeout>

000b64b2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b64b2:	6840      	ldr	r0, [r0, #4]
   b64b4:	2200      	movs	r2, #0
   b64b6:	f081 0101 	eor.w	r1, r1, #1
   b64ba:	f7ff bb6d 	b.w	b5b98 <network_listen>

000b64be <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b64be:	2300      	movs	r3, #0
   b64c0:	6840      	ldr	r0, [r0, #4]
   b64c2:	461a      	mov	r2, r3
   b64c4:	4619      	mov	r1, r3
   b64c6:	f7ff bb5f 	b.w	b5b88 <network_off>

000b64ca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b64ca:	2300      	movs	r3, #0
   b64cc:	6840      	ldr	r0, [r0, #4]
   b64ce:	461a      	mov	r2, r3
   b64d0:	4619      	mov	r1, r3
   b64d2:	f7ff bb51 	b.w	b5b78 <network_on>

000b64d6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b64d6:	2200      	movs	r2, #0
   b64d8:	6840      	ldr	r0, [r0, #4]
   b64da:	4611      	mov	r1, r2
   b64dc:	f7ff bb34 	b.w	b5b48 <network_connecting>

000b64e0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b64e0:	6840      	ldr	r0, [r0, #4]
   b64e2:	2200      	movs	r2, #0
   b64e4:	2102      	movs	r1, #2
   b64e6:	f7ff bb37 	b.w	b5b58 <network_disconnect>

000b64ea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b64ea:	2300      	movs	r3, #0
   b64ec:	6840      	ldr	r0, [r0, #4]
   b64ee:	461a      	mov	r2, r3
   b64f0:	f7ff bb22 	b.w	b5b38 <network_connect>

000b64f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b64f4:	4b02      	ldr	r3, [pc, #8]	; (b6500 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b64f6:	2204      	movs	r2, #4
   b64f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b64fa:	4a02      	ldr	r2, [pc, #8]	; (b6504 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b64fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b64fe:	4770      	bx	lr
   b6500:	2003e718 	.word	0x2003e718
   b6504:	000b76ac 	.word	0x000b76ac

000b6508 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6508:	2300      	movs	r3, #0
   b650a:	6840      	ldr	r0, [r0, #4]
   b650c:	461a      	mov	r2, r3
   b650e:	f7ff bb13 	b.w	b5b38 <network_connect>

000b6512 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6512:	6840      	ldr	r0, [r0, #4]
   b6514:	2200      	movs	r2, #0
   b6516:	2102      	movs	r1, #2
   b6518:	f7ff bb1e 	b.w	b5b58 <network_disconnect>

000b651c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b651c:	2200      	movs	r2, #0
   b651e:	6840      	ldr	r0, [r0, #4]
   b6520:	4611      	mov	r1, r2
   b6522:	f7ff bb11 	b.w	b5b48 <network_connecting>

000b6526 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6526:	2200      	movs	r2, #0
   b6528:	6840      	ldr	r0, [r0, #4]
   b652a:	4611      	mov	r1, r2
   b652c:	f7ff bb1c 	b.w	b5b68 <network_ready>

000b6530 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6530:	2300      	movs	r3, #0
   b6532:	6840      	ldr	r0, [r0, #4]
   b6534:	461a      	mov	r2, r3
   b6536:	4619      	mov	r1, r3
   b6538:	f7ff bb1e 	b.w	b5b78 <network_on>

000b653c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b653c:	2300      	movs	r3, #0
   b653e:	6840      	ldr	r0, [r0, #4]
   b6540:	461a      	mov	r2, r3
   b6542:	4619      	mov	r1, r3
   b6544:	f7ff bb20 	b.w	b5b88 <network_off>

000b6548 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6548:	6840      	ldr	r0, [r0, #4]
   b654a:	2100      	movs	r1, #0
   b654c:	f7ff bb44 	b.w	b5bd8 <network_is_on>

000b6550 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6550:	6840      	ldr	r0, [r0, #4]
   b6552:	2100      	movs	r1, #0
   b6554:	f7ff bb48 	b.w	b5be8 <network_is_off>

000b6558 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6558:	6840      	ldr	r0, [r0, #4]
   b655a:	2200      	movs	r2, #0
   b655c:	f081 0101 	eor.w	r1, r1, #1
   b6560:	f7ff bb1a 	b.w	b5b98 <network_listen>

000b6564 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6564:	6840      	ldr	r0, [r0, #4]
   b6566:	2200      	movs	r2, #0
   b6568:	f7ff bb26 	b.w	b5bb8 <network_set_listen_timeout>

000b656c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b656c:	2200      	movs	r2, #0
   b656e:	6840      	ldr	r0, [r0, #4]
   b6570:	4611      	mov	r1, r2
   b6572:	f7ff bb29 	b.w	b5bc8 <network_get_listen_timeout>

000b6576 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6576:	2200      	movs	r2, #0
   b6578:	6840      	ldr	r0, [r0, #4]
   b657a:	4611      	mov	r1, r2
   b657c:	f7ff bb14 	b.w	b5ba8 <network_listening>

000b6580 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6584:	b095      	sub	sp, #84	; 0x54
   b6586:	4614      	mov	r4, r2
   b6588:	460d      	mov	r5, r1
   b658a:	4607      	mov	r7, r0
    IPAddress addr;
   b658c:	f7ff fe08 	bl	b61a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6590:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6592:	221c      	movs	r2, #28
   b6594:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6596:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6598:	f000 f978 	bl	b688c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b659c:	2340      	movs	r3, #64	; 0x40
   b659e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b65a0:	4620      	mov	r0, r4
   b65a2:	466b      	mov	r3, sp
   b65a4:	aa0c      	add	r2, sp, #48	; 0x30
   b65a6:	2100      	movs	r1, #0
   b65a8:	f7ff f922 	bl	b57f0 <netdb_getaddrinfo>
    if (!r) {
   b65ac:	4604      	mov	r4, r0
   b65ae:	2800      	cmp	r0, #0
   b65b0:	d14b      	bne.n	b664a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b65b2:	4602      	mov	r2, r0
   b65b4:	2101      	movs	r1, #1
   b65b6:	6868      	ldr	r0, [r5, #4]
   b65b8:	f7ff fad6 	bl	b5b68 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b65bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b65be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b65c0:	4622      	mov	r2, r4
   b65c2:	6868      	ldr	r0, [r5, #4]
   b65c4:	f7ff fad0 	bl	b5b68 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b65c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b65ca:	4681      	mov	r9, r0
        bool ok = false;
   b65cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b65ce:	2e00      	cmp	r6, #0
   b65d0:	d03b      	beq.n	b664a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b65d2:	2900      	cmp	r1, #0
   b65d4:	d139      	bne.n	b664a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b65d6:	6873      	ldr	r3, [r6, #4]
   b65d8:	2b02      	cmp	r3, #2
   b65da:	d003      	beq.n	b65e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b65dc:	2b0a      	cmp	r3, #10
   b65de:	d011      	beq.n	b6604 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b65e0:	69f6      	ldr	r6, [r6, #28]
   b65e2:	e7f4      	b.n	b65ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b65e4:	f1b8 0f00 	cmp.w	r8, #0
   b65e8:	d0fa      	beq.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b65ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b65ec:	a806      	add	r0, sp, #24
   b65ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b65f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b65f2:	f7ff fe03 	bl	b61fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b65f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65f8:	1d3c      	adds	r4, r7, #4
   b65fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65fc:	682b      	ldr	r3, [r5, #0]
   b65fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6600:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6602:	e7ed      	b.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6604:	f1b9 0f00 	cmp.w	r9, #0
   b6608:	d0ea      	beq.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b660a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b660c:	2210      	movs	r2, #16
   b660e:	a801      	add	r0, sp, #4
   b6610:	f000 f93c 	bl	b688c <memset>
                    a.v = 6;
   b6614:	2306      	movs	r3, #6
   b6616:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b661a:	ad01      	add	r5, sp, #4
   b661c:	f104 0308 	add.w	r3, r4, #8
   b6620:	3418      	adds	r4, #24
   b6622:	6818      	ldr	r0, [r3, #0]
   b6624:	6859      	ldr	r1, [r3, #4]
   b6626:	462a      	mov	r2, r5
   b6628:	c203      	stmia	r2!, {r0, r1}
   b662a:	3308      	adds	r3, #8
   b662c:	42a3      	cmp	r3, r4
   b662e:	4615      	mov	r5, r2
   b6630:	d1f7      	bne.n	b6622 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6632:	a901      	add	r1, sp, #4
   b6634:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6636:	ad07      	add	r5, sp, #28
   b6638:	f7ff fdc0 	bl	b61bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b663c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b663e:	1d3c      	adds	r4, r7, #4
   b6640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6642:	682b      	ldr	r3, [r5, #0]
   b6644:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6646:	4649      	mov	r1, r9
   b6648:	e7ca      	b.n	b65e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b664a:	9800      	ldr	r0, [sp, #0]
   b664c:	f7ff f8c8 	bl	b57e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6650:	4638      	mov	r0, r7
   b6652:	b015      	add	sp, #84	; 0x54
   b6654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6658 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6658:	4b02      	ldr	r3, [pc, #8]	; (b6664 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b665a:	4a03      	ldr	r2, [pc, #12]	; (b6668 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b665c:	601a      	str	r2, [r3, #0]
   b665e:	2200      	movs	r2, #0
   b6660:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6662:	4770      	bx	lr
   b6664:	2003e720 	.word	0x2003e720
   b6668:	000b76e8 	.word	0x000b76e8

000b666c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b666c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b666e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6670:	d902      	bls.n	b6678 <pinAvailable+0xc>
    return false;
   b6672:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6674:	b002      	add	sp, #8
   b6676:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6678:	f1a0 030b 	sub.w	r3, r0, #11
   b667c:	2b02      	cmp	r3, #2
   b667e:	d81a      	bhi.n	b66b6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6680:	4c17      	ldr	r4, [pc, #92]	; (b66e0 <pinAvailable+0x74>)
   b6682:	7821      	ldrb	r1, [r4, #0]
   b6684:	f3bf 8f5b 	dmb	ish
   b6688:	f011 0101 	ands.w	r1, r1, #1
   b668c:	d10b      	bne.n	b66a6 <pinAvailable+0x3a>
   b668e:	4620      	mov	r0, r4
   b6690:	9101      	str	r1, [sp, #4]
   b6692:	f7fd fd17 	bl	b40c4 <__cxa_guard_acquire>
   b6696:	9901      	ldr	r1, [sp, #4]
   b6698:	b128      	cbz	r0, b66a6 <pinAvailable+0x3a>
   b669a:	4812      	ldr	r0, [pc, #72]	; (b66e4 <pinAvailable+0x78>)
   b669c:	f7ff fb20 	bl	b5ce0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b66a0:	4620      	mov	r0, r4
   b66a2:	f7fd fd14 	bl	b40ce <__cxa_guard_release>
   b66a6:	4b0f      	ldr	r3, [pc, #60]	; (b66e4 <pinAvailable+0x78>)
   b66a8:	7818      	ldrb	r0, [r3, #0]
   b66aa:	f7ff f9b1 	bl	b5a10 <hal_spi_is_enabled>
   b66ae:	2800      	cmp	r0, #0
   b66b0:	d1df      	bne.n	b6672 <pinAvailable+0x6>
  return true; // 'pin' is available
   b66b2:	2001      	movs	r0, #1
   b66b4:	e7de      	b.n	b6674 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b66b6:	2801      	cmp	r0, #1
   b66b8:	d809      	bhi.n	b66ce <pinAvailable+0x62>
   b66ba:	f000 f8ad 	bl	b6818 <_Z19__fetch_global_Wirev>
   b66be:	2100      	movs	r1, #0
   b66c0:	7c00      	ldrb	r0, [r0, #16]
   b66c2:	f7ff f97d 	bl	b59c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b66c6:	f080 0001 	eor.w	r0, r0, #1
   b66ca:	b2c0      	uxtb	r0, r0
   b66cc:	e7d2      	b.n	b6674 <pinAvailable+0x8>
   b66ce:	3809      	subs	r0, #9
   b66d0:	2801      	cmp	r0, #1
   b66d2:	d8ee      	bhi.n	b66b2 <pinAvailable+0x46>
   b66d4:	f000 f860 	bl	b6798 <_Z22__fetch_global_Serial1v>
   b66d8:	7c00      	ldrb	r0, [r0, #16]
   b66da:	f7ff f911 	bl	b5900 <hal_usart_is_enabled>
   b66de:	e7f2      	b.n	b66c6 <pinAvailable+0x5a>
   b66e0:	2003e610 	.word	0x2003e610
   b66e4:	2003e614 	.word	0x2003e614

000b66e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b66e8:	2823      	cmp	r0, #35	; 0x23
{
   b66ea:	b538      	push	{r3, r4, r5, lr}
   b66ec:	4604      	mov	r4, r0
   b66ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b66f0:	d80a      	bhi.n	b6708 <pinMode+0x20>
   b66f2:	29ff      	cmp	r1, #255	; 0xff
   b66f4:	d008      	beq.n	b6708 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b66f6:	f7ff ffb9 	bl	b666c <pinAvailable>
   b66fa:	b128      	cbz	r0, b6708 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b66fc:	4629      	mov	r1, r5
   b66fe:	4620      	mov	r0, r4
}
   b6700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6704:	f7ff b87c 	b.w	b5800 <hal_gpio_mode>
}
   b6708:	bd38      	pop	{r3, r4, r5, pc}

000b670a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b670a:	b538      	push	{r3, r4, r5, lr}
   b670c:	4604      	mov	r4, r0
   b670e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b6710:	f7ff f87e 	bl	b5810 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6714:	28ff      	cmp	r0, #255	; 0xff
   b6716:	d010      	beq.n	b673a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6718:	2806      	cmp	r0, #6
   b671a:	d804      	bhi.n	b6726 <digitalWrite+0x1c>
   b671c:	234d      	movs	r3, #77	; 0x4d
   b671e:	fa23 f000 	lsr.w	r0, r3, r0
   b6722:	07c3      	lsls	r3, r0, #31
   b6724:	d409      	bmi.n	b673a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6726:	4620      	mov	r0, r4
   b6728:	f7ff ffa0 	bl	b666c <pinAvailable>
   b672c:	b128      	cbz	r0, b673a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b672e:	4629      	mov	r1, r5
   b6730:	4620      	mov	r0, r4
}
   b6732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6736:	f7ff b873 	b.w	b5820 <hal_gpio_write>
}
   b673a:	bd38      	pop	{r3, r4, r5, pc}

000b673c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b673c:	b510      	push	{r4, lr}
   b673e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b6740:	f7ff f866 	bl	b5810 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6744:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6746:	b2db      	uxtb	r3, r3
   b6748:	2b01      	cmp	r3, #1
   b674a:	d908      	bls.n	b675e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b674c:	4620      	mov	r0, r4
   b674e:	f7ff ff8d 	bl	b666c <pinAvailable>
   b6752:	b120      	cbz	r0, b675e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b6754:	4620      	mov	r0, r4
}
   b6756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b675a:	f7ff b869 	b.w	b5830 <hal_gpio_read>
}
   b675e:	2000      	movs	r0, #0
   b6760:	bd10      	pop	{r4, pc}

000b6762 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6762:	4770      	bx	lr

000b6764 <_Z20acquireSerial1Bufferv>:
{
   b6764:	b538      	push	{r3, r4, r5, lr}
   b6766:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6768:	2514      	movs	r5, #20
   b676a:	462a      	mov	r2, r5
   b676c:	2100      	movs	r1, #0
   b676e:	f000 f88d 	bl	b688c <memset>
   b6772:	8025      	strh	r5, [r4, #0]
   b6774:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6776:	4907      	ldr	r1, [pc, #28]	; (b6794 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6778:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b677a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b677c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b677e:	f000 f86f 	bl	b6860 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6782:	4904      	ldr	r1, [pc, #16]	; (b6794 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6784:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6786:	4628      	mov	r0, r5
   b6788:	f000 f86a 	bl	b6860 <_ZnajRKSt9nothrow_t>
    };
   b678c:	60e0      	str	r0, [r4, #12]
}
   b678e:	4620      	mov	r0, r4
   b6790:	bd38      	pop	{r3, r4, r5, pc}
   b6792:	bf00      	nop
   b6794:	000b771c 	.word	0x000b771c

000b6798 <_Z22__fetch_global_Serial1v>:
{
   b6798:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b679a:	4d0e      	ldr	r5, [pc, #56]	; (b67d4 <_Z22__fetch_global_Serial1v+0x3c>)
   b679c:	7829      	ldrb	r1, [r5, #0]
   b679e:	f3bf 8f5b 	dmb	ish
   b67a2:	f011 0401 	ands.w	r4, r1, #1
{
   b67a6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b67a8:	d111      	bne.n	b67ce <_Z22__fetch_global_Serial1v+0x36>
   b67aa:	4628      	mov	r0, r5
   b67ac:	f7fd fc8a 	bl	b40c4 <__cxa_guard_acquire>
   b67b0:	b168      	cbz	r0, b67ce <_Z22__fetch_global_Serial1v+0x36>
   b67b2:	a801      	add	r0, sp, #4
   b67b4:	f7ff ffd6 	bl	b6764 <_Z20acquireSerial1Bufferv>
   b67b8:	aa01      	add	r2, sp, #4
   b67ba:	4621      	mov	r1, r4
   b67bc:	4806      	ldr	r0, [pc, #24]	; (b67d8 <_Z22__fetch_global_Serial1v+0x40>)
   b67be:	f7ff fdef 	bl	b63a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b67c2:	4628      	mov	r0, r5
   b67c4:	f7fd fc83 	bl	b40ce <__cxa_guard_release>
   b67c8:	4804      	ldr	r0, [pc, #16]	; (b67dc <_Z22__fetch_global_Serial1v+0x44>)
   b67ca:	f000 f84b 	bl	b6864 <atexit>
    return serial1;
}
   b67ce:	4802      	ldr	r0, [pc, #8]	; (b67d8 <_Z22__fetch_global_Serial1v+0x40>)
   b67d0:	b007      	add	sp, #28
   b67d2:	bd30      	pop	{r4, r5, pc}
   b67d4:	2003e728 	.word	0x2003e728
   b67d8:	2003e72c 	.word	0x2003e72c
   b67dc:	000b6763 	.word	0x000b6763

000b67e0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b67e0:	4770      	bx	lr
	...

000b67e4 <_Z17acquireWireBufferv>:
{
   b67e4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b67e6:	4b0a      	ldr	r3, [pc, #40]	; (b6810 <_Z17acquireWireBufferv+0x2c>)
   b67e8:	6003      	str	r3, [r0, #0]
   b67ea:	2301      	movs	r3, #1
{
   b67ec:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b67ee:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b67f0:	4908      	ldr	r1, [pc, #32]	; (b6814 <_Z17acquireWireBufferv+0x30>)
   b67f2:	2020      	movs	r0, #32
   b67f4:	f000 f834 	bl	b6860 <_ZnajRKSt9nothrow_t>
	};
   b67f8:	2520      	movs	r5, #32
   b67fa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b67fc:	4905      	ldr	r1, [pc, #20]	; (b6814 <_Z17acquireWireBufferv+0x30>)
	};
   b67fe:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6800:	4628      	mov	r0, r5
   b6802:	f000 f82d 	bl	b6860 <_ZnajRKSt9nothrow_t>
	};
   b6806:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b680a:	4620      	mov	r0, r4
   b680c:	bd38      	pop	{r3, r4, r5, pc}
   b680e:	bf00      	nop
   b6810:	00010018 	.word	0x00010018
   b6814:	000b771c 	.word	0x000b771c

000b6818 <_Z19__fetch_global_Wirev>:
{
   b6818:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b681a:	4d0e      	ldr	r5, [pc, #56]	; (b6854 <_Z19__fetch_global_Wirev+0x3c>)
   b681c:	7829      	ldrb	r1, [r5, #0]
   b681e:	f3bf 8f5b 	dmb	ish
   b6822:	f011 0401 	ands.w	r4, r1, #1
{
   b6826:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6828:	d111      	bne.n	b684e <_Z19__fetch_global_Wirev+0x36>
   b682a:	4628      	mov	r0, r5
   b682c:	f7fd fc4a 	bl	b40c4 <__cxa_guard_acquire>
   b6830:	b168      	cbz	r0, b684e <_Z19__fetch_global_Wirev+0x36>
   b6832:	4668      	mov	r0, sp
   b6834:	f7ff ffd6 	bl	b67e4 <_Z17acquireWireBufferv>
   b6838:	466a      	mov	r2, sp
   b683a:	4621      	mov	r1, r4
   b683c:	4806      	ldr	r0, [pc, #24]	; (b6858 <_Z19__fetch_global_Wirev+0x40>)
   b683e:	f7ff fdef 	bl	b6420 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6842:	4628      	mov	r0, r5
   b6844:	f7fd fc43 	bl	b40ce <__cxa_guard_release>
   b6848:	4804      	ldr	r0, [pc, #16]	; (b685c <_Z19__fetch_global_Wirev+0x44>)
   b684a:	f000 f80b 	bl	b6864 <atexit>
	return wire;
}
   b684e:	4802      	ldr	r0, [pc, #8]	; (b6858 <_Z19__fetch_global_Wirev+0x40>)
   b6850:	b007      	add	sp, #28
   b6852:	bd30      	pop	{r4, r5, pc}
   b6854:	2003e744 	.word	0x2003e744
   b6858:	2003e748 	.word	0x2003e748
   b685c:	000b67e1 	.word	0x000b67e1

000b6860 <_ZnajRKSt9nothrow_t>:
   b6860:	f7fd bc1f 	b.w	b40a2 <_Znaj>

000b6864 <atexit>:
   b6864:	2300      	movs	r3, #0
   b6866:	4601      	mov	r1, r0
   b6868:	461a      	mov	r2, r3
   b686a:	4618      	mov	r0, r3
   b686c:	f000 b844 	b.w	b68f8 <__register_exitproc>

000b6870 <memcpy>:
   b6870:	440a      	add	r2, r1
   b6872:	4291      	cmp	r1, r2
   b6874:	f100 33ff 	add.w	r3, r0, #4294967295
   b6878:	d100      	bne.n	b687c <memcpy+0xc>
   b687a:	4770      	bx	lr
   b687c:	b510      	push	{r4, lr}
   b687e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6882:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6886:	4291      	cmp	r1, r2
   b6888:	d1f9      	bne.n	b687e <memcpy+0xe>
   b688a:	bd10      	pop	{r4, pc}

000b688c <memset>:
   b688c:	4402      	add	r2, r0
   b688e:	4603      	mov	r3, r0
   b6890:	4293      	cmp	r3, r2
   b6892:	d100      	bne.n	b6896 <memset+0xa>
   b6894:	4770      	bx	lr
   b6896:	f803 1b01 	strb.w	r1, [r3], #1
   b689a:	e7f9      	b.n	b6890 <memset+0x4>

000b689c <srand>:
   b689c:	b538      	push	{r3, r4, r5, lr}
   b689e:	4b10      	ldr	r3, [pc, #64]	; (b68e0 <srand+0x44>)
   b68a0:	681d      	ldr	r5, [r3, #0]
   b68a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b68a4:	4604      	mov	r4, r0
   b68a6:	b9b3      	cbnz	r3, b68d6 <srand+0x3a>
   b68a8:	2018      	movs	r0, #24
   b68aa:	f7ff f9ad 	bl	b5c08 <malloc>
   b68ae:	4602      	mov	r2, r0
   b68b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b68b2:	b920      	cbnz	r0, b68be <srand+0x22>
   b68b4:	4b0b      	ldr	r3, [pc, #44]	; (b68e4 <srand+0x48>)
   b68b6:	480c      	ldr	r0, [pc, #48]	; (b68e8 <srand+0x4c>)
   b68b8:	2142      	movs	r1, #66	; 0x42
   b68ba:	f7ff f9bd 	bl	b5c38 <__assert_func>
   b68be:	490b      	ldr	r1, [pc, #44]	; (b68ec <srand+0x50>)
   b68c0:	4b0b      	ldr	r3, [pc, #44]	; (b68f0 <srand+0x54>)
   b68c2:	e9c0 1300 	strd	r1, r3, [r0]
   b68c6:	4b0b      	ldr	r3, [pc, #44]	; (b68f4 <srand+0x58>)
   b68c8:	6083      	str	r3, [r0, #8]
   b68ca:	230b      	movs	r3, #11
   b68cc:	8183      	strh	r3, [r0, #12]
   b68ce:	2100      	movs	r1, #0
   b68d0:	2001      	movs	r0, #1
   b68d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b68d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b68d8:	2200      	movs	r2, #0
   b68da:	611c      	str	r4, [r3, #16]
   b68dc:	615a      	str	r2, [r3, #20]
   b68de:	bd38      	pop	{r3, r4, r5, pc}
   b68e0:	2003e5a8 	.word	0x2003e5a8
   b68e4:	000b771d 	.word	0x000b771d
   b68e8:	000b7734 	.word	0x000b7734
   b68ec:	abcd330e 	.word	0xabcd330e
   b68f0:	e66d1234 	.word	0xe66d1234
   b68f4:	0005deec 	.word	0x0005deec

000b68f8 <__register_exitproc>:
   b68f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b68fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b69b8 <__register_exitproc+0xc0>
   b6900:	4606      	mov	r6, r0
   b6902:	f8d8 0000 	ldr.w	r0, [r8]
   b6906:	461f      	mov	r7, r3
   b6908:	460d      	mov	r5, r1
   b690a:	4691      	mov	r9, r2
   b690c:	f000 f856 	bl	b69bc <__retarget_lock_acquire_recursive>
   b6910:	4b25      	ldr	r3, [pc, #148]	; (b69a8 <__register_exitproc+0xb0>)
   b6912:	681c      	ldr	r4, [r3, #0]
   b6914:	b934      	cbnz	r4, b6924 <__register_exitproc+0x2c>
   b6916:	4c25      	ldr	r4, [pc, #148]	; (b69ac <__register_exitproc+0xb4>)
   b6918:	601c      	str	r4, [r3, #0]
   b691a:	4b25      	ldr	r3, [pc, #148]	; (b69b0 <__register_exitproc+0xb8>)
   b691c:	b113      	cbz	r3, b6924 <__register_exitproc+0x2c>
   b691e:	681b      	ldr	r3, [r3, #0]
   b6920:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6924:	6863      	ldr	r3, [r4, #4]
   b6926:	2b1f      	cmp	r3, #31
   b6928:	dd07      	ble.n	b693a <__register_exitproc+0x42>
   b692a:	f8d8 0000 	ldr.w	r0, [r8]
   b692e:	f000 f847 	bl	b69c0 <__retarget_lock_release_recursive>
   b6932:	f04f 30ff 	mov.w	r0, #4294967295
   b6936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b693a:	b34e      	cbz	r6, b6990 <__register_exitproc+0x98>
   b693c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6940:	b988      	cbnz	r0, b6966 <__register_exitproc+0x6e>
   b6942:	4b1c      	ldr	r3, [pc, #112]	; (b69b4 <__register_exitproc+0xbc>)
   b6944:	b923      	cbnz	r3, b6950 <__register_exitproc+0x58>
   b6946:	f8d8 0000 	ldr.w	r0, [r8]
   b694a:	f000 f838 	bl	b69be <__retarget_lock_release>
   b694e:	e7f0      	b.n	b6932 <__register_exitproc+0x3a>
   b6950:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6954:	f7ff f958 	bl	b5c08 <malloc>
   b6958:	2800      	cmp	r0, #0
   b695a:	d0f4      	beq.n	b6946 <__register_exitproc+0x4e>
   b695c:	2300      	movs	r3, #0
   b695e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6962:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6966:	6863      	ldr	r3, [r4, #4]
   b6968:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b696c:	2201      	movs	r2, #1
   b696e:	409a      	lsls	r2, r3
   b6970:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6974:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6978:	4313      	orrs	r3, r2
   b697a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b697e:	2e02      	cmp	r6, #2
   b6980:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6984:	bf02      	ittt	eq
   b6986:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b698a:	4313      	orreq	r3, r2
   b698c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6990:	6863      	ldr	r3, [r4, #4]
   b6992:	f8d8 0000 	ldr.w	r0, [r8]
   b6996:	1c5a      	adds	r2, r3, #1
   b6998:	3302      	adds	r3, #2
   b699a:	6062      	str	r2, [r4, #4]
   b699c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b69a0:	f000 f80e 	bl	b69c0 <__retarget_lock_release_recursive>
   b69a4:	2000      	movs	r0, #0
   b69a6:	e7c6      	b.n	b6936 <__register_exitproc+0x3e>
   b69a8:	2003e7e8 	.word	0x2003e7e8
   b69ac:	2003e75c 	.word	0x2003e75c
   b69b0:	00000000 	.word	0x00000000
   b69b4:	000b5c09 	.word	0x000b5c09
   b69b8:	2003e60c 	.word	0x2003e60c

000b69bc <__retarget_lock_acquire_recursive>:
   b69bc:	4770      	bx	lr

000b69be <__retarget_lock_release>:
   b69be:	4770      	bx	lr

000b69c0 <__retarget_lock_release_recursive>:
   b69c0:	4770      	bx	lr

000b69c2 <link_code_end>:
	...

000b69c4 <dynalib_user>:
   b69c4:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b69d4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b69e4:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   b69f4:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   b6a04:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   b6a14:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   b6a24:	2075 7325 4d20 444f 2545 3e75 7300 7465     u %s MODE%u>.set
   b6a34:	7075 7553 6363 7365 3d73 6425 2500 2c64     upSuccess=%d.%d,
   b6a44:	6425 252c 0064 2c58 5920 202c 3a5a 6e00     %d,%d.X, Y, Z:.n
   b6a54:	206f 6173 706d 656c 0000 0000               o sample....

000b6a60 <_ZTVN8particle11SPISettingsE>:
	...
   b6a68:	4101 000b 40d5 000b 40d7 000b 6564 6976     .A...@...@..devi
   b6a78:	6563 6e20 746f 6620 756f 646e 0000 0000     ce not found....

000b6a88 <_ZTV6LIS3DH>:
	...
   b6a98:	4429 000b 40ad 000b 40ad 000b               )D...@...@..

000b6aa4 <_ZTV9LIS3DHSPI>:
	...
   b6aac:	4315 000b 4317 000b 444b 000b 4355 000b     .C...C..KD..UC..
   b6abc:	4397 000b 4325 000b 433f 000b               .C..%C..?C..

000b6ac8 <_ZL4font>:
   b6ac8:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6ad8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6ae8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6af8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6b08:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b6b18:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b6b28:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b6b38:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b6b48:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b6b58:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6b68:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6b78:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6b88:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6b98:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6ba8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6bb8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6bc8:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6bd8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6be8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b6bf8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b6c08:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b6c18:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b6c28:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b6c38:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b6c48:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b6c58:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6c68:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6c78:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6c88:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6c98:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6ca8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6cb8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6cc8:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6cd8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6ce8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b6cf8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b6d08:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b6d18:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b6d28:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b6d38:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b6d48:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6d58:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b6d68:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6d78:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6d88:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b6d98:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6da8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b6db8:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b6dc8:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b6dd8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6de8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6df8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6e08:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6e18:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6e28:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6e38:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b6e48:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b6e58:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b6e68:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b6e78:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b6e88:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b6e98:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b6ea8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b6eb8:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b6ec8:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b6ed8:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b6ee8:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b6ef8:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b6f08:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b6f18:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b6f28:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b6f38:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b6f48:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b6f58:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b6f68:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b6f78:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b6f88:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b6f98:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b6fa8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b6fb8:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b6fc8 <_ZTV12Adafruit_GFX>:
	...
   b6fd8:	4c25 000b 5e95 000b 40ad 000b 462b 000b     %L...^...@..+F..
   b6fe8:	462d 000b 465f 000b 463b 000b 464d 000b     -F.._F..;F..MF..
   b6ff8:	456d 000b 462b 000b 4857 000b 4855 000b     mE..+F..WH..UH..
   b7008:	4677 000b 46b5 000b 46ef 000b 4735 000b     wF...F...F..5G..
   b7018:	4751 000b 47d5 000b                         QG...G..

000b7020 <_ZTV16OledWingAdafruit>:
	...
   b7028:	4d35 000b 4d55 000b 4c25 000b 5e95 000b     5M..UM..%L...^..
   b7038:	4f19 000b 462b 000b 462d 000b 465f 000b     .O..+F..-F.._F..
   b7048:	463b 000b 464d 000b 456d 000b 462b 000b     ;F..MF..mE..+F..
   b7058:	4857 000b 50b7 000b 565f 000b 5611 000b     WH...P.._V...V..
   b7068:	46ef 000b 4735 000b 4751 000b 47d5 000b     .F..5G..QG...G..

000b7078 <_ZL12splash1_data>:
   b7078:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b7088:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b7098:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b70a8:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b70b8:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b70c8:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b70e0:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b70f0:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b7100:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b7110:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b7120:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b7130:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b7140:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b7150:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b7160:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b7170:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b7180:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b7190:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b71a0:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b71b0:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b71c0:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b71d0:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b71e0:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b71f0:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b7208:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b7220:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b7230:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b7240:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b7250:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b7260:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b7270:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b7280:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b7290:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b72a0:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b72b0:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b72c0:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b72d0:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b72e0:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b72f0:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b7300:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b7310:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b7320:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b7330:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b7338 <_ZL12splash2_data>:
   b7338:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b7348:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b7358:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b7374:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b7384:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7394:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b73a4:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b73b4:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b73c4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b73d4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b73e4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b73f4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b7404:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b7414:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b7424:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b7434:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b7444:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b7454:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b7464:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b7474:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b7484:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b7494:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b74a4:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b74b4:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b74cc:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b74dc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b74ec:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b74fc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b750c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b7518 <_ZTV16Adafruit_SSD1306>:
	...
   b7520:	4eed 000b 4f05 000b 4c25 000b 5e95 000b     .N...O..%L...^..
   b7530:	4f19 000b 462b 000b 462d 000b 465f 000b     .O..+F..-F.._F..
   b7540:	463b 000b 464d 000b 456d 000b 462b 000b     ;F..MF..mE..+F..
   b7550:	4857 000b 50b7 000b 565f 000b 5611 000b     WH...P.._V...V..
   b7560:	46ef 000b 4735 000b 4751 000b 47d5 000b     .F..5G..QG...G..

000b7570 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b7570:	8000 e0c0 f8f0 fefc                         ........

000b7578 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b7578:	0100 0703 1f0f 7f3f                         ......?.

000b7580 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b7580:	d5ae a880                                   ....

000b7584 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b7584:	00d3 8d40                                   ..@.

000b7588 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b7588:	0020 c8a1                                    ...

000b758c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b758c:	40db a6a4 af2e                              .@....

000b7592 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b7592:	02da 8f81                                   ....

000b7596 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b7596:	12da                                         ...

000b7599 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b7599:	02da                                         ...

000b759c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b759c:	0022 21ff 0000 0000                         "..!....

000b75a4 <_ZTVN5spark13EthernetClassE>:
	...
   b75ac:	5cb7 000b 5cad 000b 5ca3 000b 5c99 000b     .\...\...\...\..
   b75bc:	5c8d 000b 5c81 000b 6549 000b 6551 000b     .\...\..Ie..Qe..
   b75cc:	5c75 000b 5c6d 000b 5c63 000b 5c59 000b     u\..m\..c\..Y\..
   b75dc:	6581 000b                                   .e..

000b75e0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b75e0:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b75f0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b7600:	7361 7463 6d69 0065                         asctime.

000b7608 <_ZTV9IPAddress>:
	...
   b7610:	613d 000b 612d 000b 612f 000b               =a..-a../a..

000b761c <_ZTV9USBSerial>:
	...
   b7624:	6223 000b 628b 000b 6261 000b 5e95 000b     #b...b..ab...^..
   b7634:	6253 000b 6225 000b 6235 000b 6285 000b     Sb..%b..5b...b..
   b7644:	6245 000b 621d 000b                         Eb...b..

000b764c <_ZTV11USARTSerial>:
	...
   b7654:	6325 000b 6391 000b 6369 000b 5e95 000b     %c...c..ic...^..
   b7664:	6339 000b 6355 000b 6347 000b 6363 000b     9c..Uc..Gc..cc..
   b7674:	6327 000b 632b 000b                         'c..+c..

000b767c <_ZTV7TwoWire>:
	...
   b7684:	63c9 000b 6413 000b 63eb 000b 63cb 000b     .c...d...c...c..
   b7694:	63f3 000b 63fb 000b 6403 000b 640b 000b     .c...c...d...d..

000b76a4 <_ZTVN5spark9WiFiClassE>:
	...
   b76ac:	64eb 000b 64e1 000b 64d7 000b 648d 000b     .d...d...d...d..
   b76bc:	64cb 000b 64bf 000b 6549 000b 6551 000b     .d...d..Ie..Qe..
   b76cc:	64b3 000b 64ab 000b 64a1 000b 6497 000b     .d...d...d...d..
   b76dc:	6581 000b                                   .e..

000b76e0 <_ZTVN5spark12NetworkClassE>:
	...
   b76e8:	6509 000b 6513 000b 651d 000b 6527 000b     .e...e...e..'e..
   b76f8:	6531 000b 653d 000b 6549 000b 6551 000b     1e..=e..Ie..Qe..
   b7708:	6559 000b 6565 000b 656d 000b 6577 000b     Ye..ee..me..we..
   b7718:	6581 000b                                   .e..

000b771c <_ZSt7nothrow>:
   b771c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b772c:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b773c:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b774c:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b775c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b776c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b777c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b778c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b779c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b77ac:	646e 632e                                    nd.c.

000b77b1 <link_const_data_end>:
   b77b1:	00          	.byte	0x00
	...

000b77b4 <link_constructors_location>:
   b77b4:	000b4279 	.word	0x000b4279
   b77b8:	000b5cc1 	.word	0x000b5cc1
   b77bc:	000b5e61 	.word	0x000b5e61
   b77c0:	000b5e85 	.word	0x000b5e85
   b77c4:	000b5fbd 	.word	0x000b5fbd
   b77c8:	000b5fcd 	.word	0x000b5fcd
   b77cc:	000b5fe9 	.word	0x000b5fe9
   b77d0:	000b64f5 	.word	0x000b64f5
   b77d4:	000b6659 	.word	0x000b6659
